{"version":3,"sources":["playground/tiles.ts","playground/render.ts","src/compass/compass.ts","src/compass/index.ts","src/grid/functions/flatTraverse.ts","src/grid/functions/inStore.ts","src/utils/isObject.ts","src/utils/isAxial.ts","src/utils/isFunction.ts","src/utils/isOffset.ts","src/utils/isPoint.ts","src/utils/offsetFromZero.ts","src/utils/index.ts","src/hex/functions/offsetToAxial.ts","src/hex/functions/cloneHex.ts","src/hex/types.ts","src/hex/functions/height.ts","src/hex/functions/hexToPoint.ts","src/hex/functions/isHex.ts","src/hex/functions/width.ts","src/hex/functions/corners.ts","src/hex/functions/createHex.ts","src/hex/functions/equals.ts","src/hex/functions/hexToOffset.ts","src/hex/functions/isFlat.ts","src/hex/functions/isPointy.ts","src/hex/functions/toString.ts","src/hex/functions/createHexPrototype.ts","src/hex/functions/index.ts","src/hex/index.ts","src/grid/functions/neighborOf.ts","src/grid/functions/index.ts","src/grid/grid.ts","src/grid/traversers/at.ts","src/grid/traversers/branch.ts","src/grid/traversers/move.ts","src/grid/traversers/rectangle.ts","src/grid/traversers/index.ts","src/grid/index.ts","src/index.ts","playground/index.ts"],"names":[],"mappings":";;AwCAA;;AACA;;AACA,AxCFO,AEAP,ACAA,A4BAA,AOAA,ADAA,ATAA,ACAA,AdAA,AwBCA,A3BDA,IVAY,EFAC,CAAC,GAAG,QAAV,UEAP;ADCA,ADDO,AIGP,ACAO,AyBHP,AEAA,ACGO,ACFP,ACCA,ACFA,AtBAA,AOAA,AMAA,ALAA,ANAA,AOAA,ANAA,AOAA,ANAA,AOAA,AZAA,AaEO,APFP,AJCA,ARAA,ACGO,AFJP,AGCA,ACAA,ACDA,MXCE,AKEW,A4BAA,APDA,AlBEA,CRHV,CiCEY,EjCFT,CiCE4B,E5BAd,CqBDC,ErBCE,AGCA,CHDgB,AqBDf,C1BFjB,A0BEkB,ClBEuB,CHDzB,EAAwB,A4BA7B,EzBCQ,EHDH,A4BAyD,CAAC,CAAD,AzBCD,EyBDK,C5BAnB,IAAI,AGCiB,CHDhB,A4BAU,IzBCD,CHDd,A4BA8B,C5BAnB,A4BAoB,G5BA/B,AGC+B,CHDhB,E4BAsB,C5BAnB,A4BAoB,C5BAnB,KGC7E,GHDyE,EAAf,A4BAqC,C5BA/F,A4BAwF,CAAxF;AOKP,AxCRO,AGAP,ACIO,A2BJP,AOAA,ADAA,AjBAA,AQAA,AFE2B,AGF3B,AdQO,AwBPP,A3BDA,ADCA,EeC2B,CAAF,GcMnB,AxCNJ,AIEW,AWIA,CfNV,GAAG,QwCMY,ApCJO,AWIA,EfRlB,CwCQc,ApCJuB,AWIhB,UXJA,IAA8D,CACxF,MADwF,EAExF,MoCEiD,ApCJuC,KAGtF;AoCEF,AvCNF,ADHO,AEAP,ACAA,ACQE,A2BRF,ADCA,AEAA,AMDA,AJIA,AGJA,AFKO,ACJP,AtBCA,AOAA,AMDA,ALEO,ANDA,AOCA,ANDA,AWFP,AJEO,ANCA,AODA,AZCA,AaDuB,APAvB,AUFP,AdSE,AwBRF,A3BDA,ALGO,AEAA,ACAA,ACDA,CTFP,CsCSE,AdP4B,AXO5B,IfNA,AIKI,A+BHO,AbFA,ANDA,AOCA,ANDA,AOAA,ANCA,AODA,AZCA,AMDA,AJOP,ARNO,AEAA,ACAA,ACDA,CXCV,AIKI,CWCC,EfNF,AmCEW,CjCLL,AgBGM,CsBMN,ApCDA,AkBLO,AEDA,CpBMN,A+BHO,A5BFA,AGAA,C8BMN,ALJsB,AjBFd,AODD,AVMO,ANLP,CaAC,AEDA,CFCC,ALDA,AOAA,AjBCC,AGAA,CVHjB,AsBGe,AGDE,ANAA,AVCC,CODA,ASAA,CHCiB,ALDhB,ACCL,CdKd,AkBLe,ALDK,AEAC,ARAD,CPMN,AYNQ,ATCN,AGAA,CDAC,C0BEJ,AZFU,ALC5B,APF4B,CAAC,CwBGkC,AbD/D,ATD8B,ANC9B,AGAA,CaD+B,AdC/B,CcDgC,AJDP,CHAC,AOCK,AVAE,CAAC,CsBEkC,AZFzB,AZDf,CPMvB,AmBL0B,AJDe,CfM9C,AYN+C,AHCd,AFDY,CwBG0B,AZFjB,CnBKtB,A+BHd,AtBF6B,CXHjD,EAAoC,AWGD,CMDoB,CgBGqC,AnBHpC,AOCvB,AVA6B,CFDhC,CQA4B,CHAC,CAApD,CEES,CKD+E,AVA5D,AMD2B,ARAO,CQAN,GDE7D,AXA2B,AGAX,CSFwC,AVE5B,CIDsE,AMDhC,CAAV,CAAnD,ARAsE,COEnD,AXAxB,AGAA,CQAyB,ATAzB,CSA0B,APFoD,GJEzC,AGAX,CDAY,ESAN,APFoD,COEnD,EXAU,AGAX,CHAY,AEAA,ACAX,ACFuD,CFE3C,OFAR,AGAX,ACFsE,CJE3C,AEAf,ACAI,CDAY,CSA5B,APFyE,COEnD,APFoC,CAAlB,CJER,AGAX,CHAY,AEAA,ACAX,CHAX,AEAuB,ACAlC,CQAA,AXA1B,AGAA,ACF0G,CAArG,COEkD,ATAjB,CAAtC,CFAiE,AGAX,GDAc,GFAG,AGAX,CHAY,AGAX,EDAa,CAAC,ISDtE,CXC4D,AGAX,CHA2B,AGAX,EDAF,CAAgB,EFAE,AGAX,CHAY,AGAX,CHAX,AGAX,CHDjD,AECoF,ACDpF,CDCqF,GAAtB,CAD/D;A+BMS,AvCJhB,ADLO,AECL,ACDF,ACSI,A2BTJ,AOAA,ALKO,AILP,AFME,AfLF,AEIE,ACDA,ANF2B,AWF7B,AJEyB,ACAE,AZEzB,AaFuB,AGFzB,AdUE,AwBTF,A3BDA,ANGO,CoBDiB,CxBDtB,AqBGA,ANF2B,AOAJ,ACAE,AZEzB,AEMA,CFNC,C2BKa,CjBLX,AVAA,CbAH,AiCCW,APH2C,ApBC3C,CNCV,AuBAI,CAAC,AVAA,AEMA,CyBDa,ALHZ,ATJkD,C1BErD,AmCEI,ATJkD,AXQlD,CyBDa,ApCAZ,A6BJO,AVDP,AVAA,E2BKG,AvBPa,CgBGN,APH2C,ApBC3C,CoBD4C,CtBOjD,A6BJT,AECE,CnCNF,AISU,AsBPV,ApBC+C,C6BGpC,G/BGP,CAAW,AENE,E6BGf,EjCLP,AIGA,CJHA,EiCK0B,G/BGI,CAAC,AELxB,KiBAiB,AVAA,APAxB,CFK8B,EAAS,EELtB,CiBAR,AVAA,EUAuB,AVAA,CTKF,AmBLrB,CnBKA,AmBNoF,CnBM3F,ASLO,CADyF,CXFlG,AIGA,CJHA,GAAA,AIG6B,CJH7B,GAAA,CAAA,AIGkC,CJHlC,GAAA,CIGuC,EJHvC,EIEK;AkCMoB,AvCF3B,ADPO,AEEL,ACFF,ACUG,A2BVH,ADGA,AECM,AMJN,ADAA,AFOI,ACLJ,AtBEO,AODP,AMDA,ALIE,ACDA,ANHwC,AWF1C,AJEuB,ACAE,AZGvB,AgBLF,AdQ4B,AwBP5B,A3BDA,CYEsB,ACAE,AVMjB,CbNL,AqBGA,ANHwC,AJGxC,CAAC,C2BIwB,CjBJtB,AVAA,CZEC,ADFJ,A8BFI,AECO,AlBAA,AUF2C,ACAE,CFGnD,CvBAH,EwCI6B,ARL3B,AGGI,CnCFH,AgCDU,CQKkB,AvBPiB,EHE/B,AGFiC,EkBKtC,CrBHQ,AUF2C,ACAE,CxBKnD,AaHsB,CqBGhB,CbDd,CrBCW,AkCAjB,ArBHoB,AQEtB,CEJsE,ACAE,CKCnD,AhBCyB,EdJzC,AsBMQ,CpBJb,A4BCwB,C5BDxB,A4BEA,E7BG2B,CAAC,C6BJJ,AhBCsB,EgBC9C,ChBDsF,EAAhE,AQEE,CAAC,CAAD,EAAwB,CRF+C,AQEvE,CAAxB,AEJmF,ACAE,CxBKlE,CAAuB,CqBDW,CEJhD,ECAA,GvBAL,CAAA,CDKmB,CAArB,CCLE,CAAA,CoBIiE,CAAC,CpBJlE,AoBIiE,CpBJjE,CAAA,AoBI0F,CAAzB,CAH5D,CpBDL,GAAA;AsCOY,AxCTP,AEGL,ACHF,A4BAA,ADKI,AEkCF,AMvCF,ADAA,AFQI,ArBHF,AMHF,AGC+F,ANDvC,AWFxD,AfGoG,AgBHpG,AUCA,A3BDA,CWGiC,AVAE,CXAjC,A4BEE,AEkCF,ATpCK,AVAA,C2BK4C,AVH9C,CbHmD,CaGjD,C9BCL,A8BDA,AhBAI,EdCF,AmCEI,GnCFD,AiBJ+C,EeqCpD,CAAmB,CG/BN,GAAG,MAAd,CnCRG,CEGL,A8BoCA,C9BpCA,AYEa,CkBkCuB,OlBlChC,CAAJ,EAAwB,OkBkCxB,EAAsG,I9BpCtG,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,GAAA;AsCOA,AvCFF,ADRO,AEIL,ACJF,ACYE,A2BZF,ADKU,AEkCW,AMvCrB,ADAA,ADIA,AtBEI,AODG,AMFP,AXCO,ACF0D,AWFjE,ATIO,AUJP,AUCA,A3BDA,E4BUE,AtCNA,A4BCQ,CAAC,C7BGP,AgBN6D,ChBM5D,A6BHQ,C9BEX,A8BFY,ATAD,ALDA,AGAA,EnBGT,AIKI,C4B2Ba,ClBjCX,CdCH,EwCGM,EAAE,AnBLO,AFDA,CHAC,CfIvB,AGIiB,CiBPQ,AFDC,ClBIP,AoBHsB,ALDd,CZQF,CoCJ0B,AR+B9B,C5B3BnB,E4B2BmB,CbnCI,CjBAvB,AcAwB,ChBJnB,AEIL,EiBA4C,CHAC,GKCtB,EAAmC,CWkCvC,AbnCgC,CHAC,EGAE,CECI,ALDH,AGAlD,GEC0F,CLDpC,CAAC,IAAL,CAAU,CdAjE,AcAuD,CdAvD,AcAK,GdAL,CAAA,GAAA,CAAA,CAAA,GAAA,GAAA;AsCOA,AvCFA,ADTK,AEKN,ACLD,A4BAA,ADKE,AEwBA,AM7BF,AJSO,AGTP,AFUI,ArBJQ,AMHZ,ACEmG,AJH7C,AWFtD,ACAA,AUCA,A3BDA,CVAA,A4BG0B,CUQxB,AnBNiG,CnBLvF,A4BMV,ATDkG,AJHzE,EIG2E,CrBGpG,AkCCW,ApBHD,AODqF,EmBMzF,AvCFA,ADDJ,CgCqBF,AGnBO,ArBJC,C0BKA,CxCHH,CCCK,AiCAO,CCCN,CHmBX,AGnBY,CDDQ,CACpB,CjCDM,A+BoBE,AGnBO,ClCDC,AkCCd,EAAgB,CHmBN,AGnBO,CDDC,ElCTf,AgC6BG,AElBR,CCDuB,CHmBvB,C9B7BkC,GgCSd,ACClB,EAA4B,CAAC,EDEd,ACFf,CDEgB,CCFiB,IlCD7B,CAAN,AiCGiB,EAAS,MAAT,KAAmB,YhCZ1B,wBAAwB,GAAA,EAAA,CAApC;AsCQmD,AvCElD,ADVM,AGAP,ACaE,A2BbF,ADMI,AQNJ,AJaE,AGbF,AFWM,ACNN,AtBCiB,AODwF,AMDzG,ALIA,ALN4E,AWF5E,ACAA,AUCA,A3BDA,C4BQqB,CAArB,AVFI,ATDqG,AJH7B,CaIvE,ATDqG,ESCnG,ATDqG,CrBI1G,A8BHA,AKKI,ArBLW,CVOV,CJJH,AkCII,AjBX0E,CHIxE,AQED,CLN2E,CjBO7E,EIIM,A+BFA,GAAG,EDEE,EZLlB,CYKqB,AZLA,ClBKnB,A+BFoB,AbHtB,CaGuB,CbHmB,CAA1C,ClBK0B,CJbnB,AsBQsD,SlBK3D,EAAoC,Y8BAJ,ACFA,MDEb,CAAnB,ACFqB,EAAoB,SAApB,CAAD,CAAhB;AKGN,AxCdO,AEOP,ACPA,ACcI,A2BdJ,ADMU,AEwBR,AM9BF,AJcE,AGdF,AFYM,ArBNgB,AMFtB,ACCiG,ACI/F,ACDK,ANN+E,AWFtF,AfQO,AgBRP,AUCA,A3BDA,CSKyB,CSCf,CAAC,C5BCC,AeL0E,CaIzE,AbJuE,CuBY9E,AxCJJ,AmCEI,AdPgH,AEGzG,AVAA,EbET,AkCII,C9BAC,A4BgBP,AlBxBuB,AQGhB,CkBKC,AlBLA,CtBCH,AsBDI,CaGC,AbHH,CkBKI,ALFA,CDEC,C9BAC,A4BgBb,EQhBe,ANAK,ACFhB,AbHW,CUqBL,AGlBM,AbHA,CYKhB,AZLiB,CAAV,CCDmB,EVAE,CSCN,ACDO,CnBM3B,A+BFE,AbHmB,ACDO,CiBMnB,AlBLa,ACDK,AVAE,C2BMX,AtCPtB,AoBEwB,ATDU,CUAS,CvBRpC,AIcsB,A4BgBlB,ATtBoB,CVAE,CUAqB,CDCtB,ATDe,CmBsBH,AVrBX,CAAC,CAAhC,ATD+B,EUAF,AVA6B,CTMtB,CoCAzB,ApCA0B,EoCAH,EjBNyD,AVA5D,ETMK,EAAS,ESNmD,ITM5D,CAAlC,EAAoD,KoCAV;AAAE,AvCFzC,ADZA,AGAP,ACeM,A2BfN,ADME,AEyBE,AM/BJ,AJeE,AGfF,AFaK,ACPL,AtBAU,AOAR,AMDF,ALKC,ANJM,AOGL,ANPuF,AWFzF,AfSE,AMHK,AUNP,AUCA,A3BDA,CkBG0B,CUWsB,AjBL9C,AVAA,CiBFA,AjBEC,CIPsF,CMOpF,AVAA,CZGQ,ADDX,AIII,A8BAA,AbTA,ALAO,AGAA,CqBQwC,AjBL9C,CvBEH,AcLoC,ASEqD,AVAK,C2BM3C,EAAT,AxCHvC,AmBLW,CfSN,A4BgBF,AhBzBS,CkBSN,CfTQ,ClBMC,AGGP,A4BgBF,AhBzBS,AGAA,CeSN,ApBTZ,AEAmB,EfMG,A+BmBV,IEhBd,CjCHuB,CoBNb,CjBSN,CJfC,CCY8C,W+BmB3B,AXzBpB,CAAJ,EAA2B,EWyBE,YAAf,EAA6B,KAA7B,CAAmC,WAAnC,CAAZ,CADwC,CACoB;AQjBL,AvCDzD,ADbK,AIgBD,A0BTF,AhBAA,AMDG,ACCH,ALDqB,AOIvB,ANRkF,AJQlF,AMJsB,EqBQmC,AvCDzD,A6BNE,AdDqB,AOIvB,AVAA,AMJsB,CWCnB,AbLsB,AJQxB,EiBHI,APGF,AVAA,CbEH,AIII,A0BTJ,AVDW,CGIN,CiBI0D,AxCF7D,AuBFI,AVAA,E2BI2D,A1BPzD,CdKH,AqBLI,AEGA,AVAA,EGJY,AGAD,ClBOR,CAAC,AGGA,CAAC,GgBVU,ChBUpB,CAAe,AUTA,CMDQ,CAAC,CnBO5B,AaNsB,COAC,CrBPlB,AqBOmB,CpBMC,AGGrB,CgBVuB,EAAgB,CCClC,CAAqB,IDDH,CCClB,CDDkD,ACCzD,AEGsB,AVAA,MUAf,AVAA,EUAuB,AVAA,CUAvB,EVAA,SCH2B;A0BOQ,AtCP9C,AEUK,A2BhBL,ADMU,AEyBN,AM/BJ,AJgBE,AGhBF,AFcI,ACHE,AtBLkC,AMDuB,ACE5D,AMFH,ALMA,ANNsC,AOEuD,ANNC,AWD9F,AfOkG,AMF7D,AULrC,AUCA,A3BDA,C4BaoC,AtCPpC,AqBC+B,AVAE,C2BMpB,AVPH,AVDqD,AJAzB,AOE/B,ANNuF,AJMvF,AMF8B,CqBQrC,AVPW,AVDkD,AHJlC,EuBa3B,AVRa,ChBA2B,CoBUjC,EELS,AtBLsB,AQK7B,EpBLG,AiCQD,CnBTqC,AGAD,Ca0BpC,AEfE,ClBXqC,AGAD,GgBS7C,CHiBY,AIpBV,CACJ,EdDF,CAAsB,CUoBX,AVpBX,CUoBsB,CEfpB,AZL0C,CAA5C,CUoBW,CAAe,AVpBsC,CYKnC,EFeA,CAAC,E9BzB9B,CkCKM,ClCL6B,CkCOjC,GJkBwB,EAAf,EIpBL,EAEoB,CJkBmB,GAAzC,QEfsC,MAAb,EAAqB,OAArB,EAA8B,MAA9B,CAA3B,EAAkE;AMDpE,AtCRE,AEUC,A0BXD,AE0BC,AEfC,ACFD,ACAD,AtBT2C,AMDqB,AEOhE,ANPkD,ACJ6C,AEI9C,CWHzB,C5BKxB,AkBFgE,AHJ+B,CaM/F,AKFA,CDYE,AlBZgD,AGAD,CawBjD,ClBvB2C,CgBJnB,EAMxB,AMOO,AdHA,CcGC,AdHA,CYKC,AZLA,GYKG,AZLL,EcGA,EAAS,CdHC,CAAC,CAAC,GcGZ,AdHA,CpBLP,CAAA,AgCUE,EZLwB,CcGA,AdHC,CAAC,GAAF,KAAU,CAAC,CAAC,GAAtC,MpBLA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;AsCSF,AtCRE,A6BRF,ADQI,AQRJ,AJkBI,AGlBJ,AFgBC,ACAG,AtBVkC,AMDuB,ACI3D,AMHF,ALOC,ANRiD,ACJvB,AWD3B,ATKiD,AULjD,AUCA,A3BDA,CuBIO,AfCsB,AHJH,CfOxB,A4BAE,CAAC,CIUD,CJVG,AhBFiB,CgBEhB,AVHyE,ACI3E,AJPJ,CaMA,AhBFkD,AMAlD,GnBSQ,AiCGA,AEFA,AtBVc,CoBYb,ApBZP,IbSW,AiCGX,CjCHY,AiCGA,CjBhBH,EhBaH,CAAW,EgBbH,ChBaE,AiCGhB,EhCVF,CAAA,CDO2B,AoBNd,KAAT,CpBM6B,AoBNjC,CpBMkC,CoBNb,EpBMY,CAAzB,EAAgC,EgBbX,EhBarB,CAAqC,EAArC,CAAwC,AgBbhD,CfMA,CAAA,CeLI,GfKJ,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;AsCSF,AtCRE,AESA,A2BlBF,ADQW,AE0BD,AMlCV,ADAA,ADgBY,AtBTR,AMDA,ACIA,ALLmB,ACDf,AWJR,ATKsB,AULtB,AUCA,A3BDA,CIKsB,AGAD,CjBInB,A4BDS,AVFP,AHFI,CaII,AVFP,AHFI,EaIK,AVFP,AHFI,CmBYC,AhBVJ,AJAN,AGAA,GfYO,A4BgBC,AZ5BC,CCID,CeMA,AtBTC,CGHO,EGEF,CHFK,EHGJ,AMDE,AJAN,AGAA,CfYX,AUXgB,CGHO,CGEvB,AHFwB,EDER,AGAA,ELCP,AGHU,CfKnB,A8ByBQ,AlB3Be,AGHM,CfK7B,AeLmB,CAAV,Ce8BkC,GlB3Bd,AGHM,CHGL,AGHM,Ge8Bc,Af9BX,CAAC,EHGjB,CAAc,AGHM,CAAlC,EDEoB,AGAA,EFFmB,CHGL,AGJvC,CHIwC,EED5C,AGAA,CjBGA,CAAA,CcHsC,AGAA,GjBGtC,CAAA,GAAA,CAAA,CAAA,AYFqC,CAAsB,CKDV,CjBGjD,AcHkD,AGAA,CLCb,AEDc,CFC5B,CAAd,CZET,CYFkE,EKDjB,CLCxC,AEDyC,AGAlD,CHAA,CFCuE,CKDV,CHAC,QGAQ,CLC7D,AKD8D,CHAC,CFCY,AEDX,KGAH,CADjE,CHCmE,CADnE,EFEI,CAAP;A0BWJ,AtCRE,AESD,A2BnBD,ADQE,AE0BoD,AMlCtD,AJmBI,AGnBJ,ADgBmB,AtBRhB,AMFqB,ACIZ,AMHZ,AJKO,ANPC,AWLR,AfYO,AgBZP,AUCA,A3BDA,CRGO,A0BDmB,C5BQxB,AkBJsB,AHDhB,CaIN,AVHuB,AHDhB,EGCkB,AHDd,Ce6ByC,AIlBnC,AhBVS,ACIhB,AEEC,AVAA,GqBOJ,AdbsB,ACIrB,EWwBiD,CIlBjD,AnBXU,Ce6ByC,EAAT,AEfrC,AdbsB,AHDd,CAAX,CMOY,CHNgB,CHDZ,AJOF,CUAC,ANPhB,CMOiB,CVAC,CIPI,AJQ/B,CIRS,CfKT,CAAA,CgCSE,AjBdiC,IiBcN,UAAU,CAAC,OhCTxC,AgCSuC,ChCTvC,CgCSiD,GhCTjD,CAAA,EgCSuC,ChCTvC,AgCSE,ChCTF,CAAA,AgCS0D,GhCT1D,IAAA;AACD,A6BXD,ADSI,AEyB6D,AMlCjE,AJoBM,AGpBN,ADgB2B,AhBVzB,ACIe,AEEa,ANTxB,AWHN,AfaI,AgBbJ,AUCA,A3BDA,CVMA,AkBDiF,AHH/E,CaOE,APG0B,AVC1B,CZDF,ACNU,A4BGP,AVFH,AGK0B,CNLtB,CaEC,AjBIL,CiBJM,AEyByD,AEd3D,AEJqB,AfNV,CSDf,ETCQ,EeMsB,CJkBuC,AEd3D,CAAC,CFc4D,AIlBtC,GFI7B,CAAY,QhCdiB,IgCc7B,mChCdM,uBAAuB,GAAA,EAAA,CAAnC;AsCcA,AvCDC,A8BnBD,ADSW,AEyByC,AMlCpD,AJqBK,AGrBL,ADgBqC,AtBNnC,AMHE,ACGkB,AMFtB,AJIiC,ANJzB,AWRR,AfaS,AgBbT,AUCA,A3BDA,CXWO,C6BFI,AVFP,AGK6B,ANJzB,AJKC,CiBJG,AVFP,AGKuB,ANJnB,EaCK,AEyB+B,AZ3BtC,AHCM,CuBYP,ARcI,AZ3BF,EgBS6B,CAAC,AtBN7B,AMHE,ACGc,EeMe,CAAL,AnBRf,EGDJ,CNGD,AGFQ,CHEP,AGFJ,CGDO,CoBaD,CvBZU,CGD1B,AHCS,CuBYW,C1BVb,CAAc,AGFU,CAAtB,GAA0B,CAD/B,CHGuB,CAAC,C0BUT,IAAyB,C1BVvB,CAAc,MAAM,CAAC,cAAP,CAAsB,GAAtB,CAAd,CAAd,EAAyD,GAAzD,EAA8D,QAA9D,CAAP;A0BWA,AtCRF,A6BbA,ADSE,AQTF,AJsBG,AGtBH,ADgB2C,AtBL1C,AMJuB,ACGd,AEE0B,ANH5B,AWTR,AfaE,AgBbF,AUCA,A3BDA,CkBE0B,AhBCnB,ADSsB,COLL,AGKY,ANH5B,CaCN,AVHuB,AHEhB,AJKP,CXDU,CkBNe,AHEhB,CGFiB,EoBcpB,AJLmC,AfNH,AEEZ,CaIgB,AhBTb,EgBSe,CnBP5B,CICd,EDHiC,AHEhB,GuBYH,ApBdsB,CHEf,CfIzB,AeJ0B,CuBYK,EAA7B,CvBZmB,CAAU,CAAV,CAAV,IAA0B,CAAC,GAAG,CAAC,GAAG,CAAlC,IAAuC;AuBchD,ATvBF,ADUI,AE6BA,AMvCJ,ADAA,ADgBmC,AhBTjC,ACIE,AMFJ,AJG4C,ANLtC,AWPN,AfcI,AgBdJ,AUCA,A3BDA,CQKiF,AHJ1E,CaSH,APEwC,AVExC,CiBJC,AVFH,EUEK,CAAL,CMMQ,CIOF,ARgBA,AnBzBN,EQHQ,GmBYG,GAAe,EAA1B,GnBZmB,GAAG,CW4BC,YAAY,GAAjC,EAAsC,gBX5BJ;AmBapC,ATxBF,ADUU,AE8BJ,AMxCN,AJwBE,AGxBF,ADgBmD,AhBR/C,ACGoC,AECZ,AKZ5B,AfcY,AgBdZ,AUCA,A3BDA,CWY2B,CiBYzB,AVdQ,AVFN,APMQ,CiBJD,AVFT,EUEW,CAAC,AMMqC,AfLX,AEEtC,GWWO,Abb6B,EW6B3B,CQhBC,CAAC,CjBXH,CWWR,AER0D,EbH/C,CaGkD,EIQ7D,CAAoB,IAAD,ERgBf,EQhBwB,CRgBA,IT3BA,CAAC,CS2BI,AT3BL,EAAI,CAAJ,EAAO,GaG2C,GbHlD,CAApB,GAAqC,eAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,MAAP,CADvD;AiBaH,AvCJJ,ACRA,A6BbA,ADUE,AE+BM,AMzCR,AJyBC,AGzBD,ADgBU,AhBRH,ACGsC,AMD7C,ACVA,AfcE,AgBdF,AUCA,A3BDA,CVaA,A4BX0B,AIMnB,ArBIsB,CiBFV,AVFZ,CAAC,EAAE,CnBaJ,AmBbK,ACGkC,ARIvC,EuBCgF,ChBRxE,CoBiBJ,CtCZE,G8B4BE,AnB1BA,CuBC+E,AhBRzE,EnBaH,AYNA,CuBET,AhBTe,CoBiBJ,ARgBA,C/BpBE,EuCIC,ARgBA,C/BpBF,IAAwB,ACR5C,A8B4B2B,CQhBC,ARgBA,CQhBC,AtCZD,G8B4BN,CQhBW,ARgBA,CQhBC,CAAD,CAAL,A3BVQ,C2BUd,A3BVe,G2BUG,A3BVJ,C2BUhC,CAD0B,A3BTY,C2BUA,CJRR,CAAC,AvBFC,EAAW,GmB0BG,CAAC,EnB1Bf,CAAtB,GmB0BmB,AnB1BwB,EmB0BnC,CAAd,CIxB0B,EAAqC,OAArC,EAA8C,EvBFN,CAAC,GuBEW,AvBFZ,CuBEa,CvBFP,GAAN,EAAW,EuBEnD,EAA+D,EvBFvB,CAHnE,GuBKgG,CAAC,MAAtE,CAD2D,GAEpF,gBAFL;AnCKwC,ACP1C,A6BdF,ADE0B,AEwClB,AM1CR,ADAA,ADoBI,AhBZF,ACGoC,AOXtC,ACAA,AUCA,A3BDA,CkBEA,AVGiF,ClBS/E,CkBLA,ECEsB,EAA4B,IeSzC,IJsBI,G9B5Bb,CAAA,EmBHsB,CAApB,SeSiB,CAAC,GlCNpB,CAAA,GAAA,CAAA,GAAA,CAAA,AkCMuB,ClCNvB,GAAA,CkCMoB,CAAD,ClCNnB,CkCM+B,gBAAK,iBAAQ,MAAR,CAAe,SAAf,EAA0B,CAA1B,CAAL,EAAmC,MAAM,GAAG,CAA5C,CAAZ,CAAV,EAAuE,gBAAK,SAAL,EAAgB,KAAK,GAAG,CAAxB,CAAvE,EACL,MADK,EAEL,MAFK,CAAP;AIMA,AtCXF,A4BHF,AE8BiB,AIlBd,AhBfC,ACGA,AMAG,EzBGL,AkBNE,CgBMF,AhBNG,CoBiBD,CpBjBG,CUGD,AVHE,AOGK,GPHF,CYiCM,CX9BN,GmBcG,ApBjBE,CoBiBD,ARgBA,EZjCI,ACGF,CnBGf,AmBHgB,CmBcd,AtCXF,CsCWkB,ApBjBlB,CUGmB,GAAG,ATAb,AMAoB,CGC7B,ATDuB,EMAsB,Eac3C,EnBd2B,CAAC,GnBG9B,CAAA,EmBHuB,CAAc,CnBGrC,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA,AmBHuB,CAAd,EAA6C,WAA7C,EAA0D,UAA1D,CAAP;AmBgBA,AvCNF,ADTK,AEGL,A6BfF,ADYI,AE6BoB,AMzCxB,ADAA,ADwBC,AhBhBuB,ACIrB,AMAD,ACZF,AWCA,A3BDA,EVeE,A4BHE,AVJoB,AOItB,CGAG,AVJoB,EUIlB,AVJoB,CnBarB,ADTO,A8BAX,AVJ0B,GAAG,CoBmBrB,AvCNA,A+BoBc,EL7BZ,C1BSC,CDTQ,A2BAP,CPJuB,CYiCP,ChC7BN,CAAC,AEGvB,A8B0B8B,AZjCQ,CoBmBrB,AvCNjB,ADTsB,AEGtB,EFH0B,CwCeN,AxCfE,CwCeD,ARcc,CQdb,AxCfO,AgC6BO,ChC7Bd,EAAU,CwCeN,AxCfJ,CwCeK,ARcc,CQdf,AxCfS,AgC6BO,CQdxC,AxCfoB,EAAgB,CAAhB,CEGtB,CFHyC,AEGzC,A8B0BoC,ChC7Bd,EAAsB,AEG5C,A8B0BmD,ChC7B7B,AEGtB,A8B0BmC,EhC7BY,CAAzB,AEGtB,CAAA,CFHkD,AEGlD,CFHsB,EAA+B,AEGrD,CFHsB,EAAkC,AEGxD,CFHsB,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,EAA9C,EAAkD,EAAlD,EAAsD,EAAtD,CAAjB;AwCgBH,AtCZF,A4BJQ,AE6BK,AZjCb,AOIc,CPRiE,ClBY/E,A4BJQ,CAAC,AVHT,CoBmBE,AbhBY,CGAH,CAAC,GUgBL,ARaD,CQbE,CbhBa,EAAE,CagBrB,AbhBU,CagBC,GtCZb,CAAA,KsCYsB,GAAG,CAAC,GAAG,ItCZ7B,CAAA,IAAA,CAAA,GsCYmC,AtCZnC,CAAA,CAAA,GAAA,IsCY6B,AtCZ7B,CsCYyB,EAAsB,OAAtB,EAAH,GAAqC,aAAM,SAAN,CAAzD;AACD,AvCPD,ADTK,AEIL,A6BjBF,ADYE,AE8BK,AM1CP,ADAA,ADiCA,AhBxBI,ACKF,AMF0B,ACZ5B,AWCA,A3BDA,CkBWwB,C5BMtB,AkBRE,CoBcF,AVVA,AVJG,COGuB,CPHrB,CpBIM,AoBJL,CY8BF,EING,AhBxBE,ACKF,EMF0B,EAAE,C3BChB,AoBJL,CCKD,CAAC,CrBDQ,AoBJL,CpBIM,AEIvB,CAAA,CFJsB,AoBJtB,EnBaI,ADTuB,AqBCpB,CAAc,CrBDC,CCSf,CAAC,ADTuB,EAAT,CqBCK,CrBDQ,AqBCP,CrBDN,ECStB,ADTsC,CAAhB,CEItB,AkCgBF,CpCpB2C,AEIzC,AkCiBA,AfpBqB,CrBDC,AqBCa,ErBDS,AEI5C,CFJsB,AEItB,EFJ+C,CAAzB,AEItB,AkCgBF,ClChBE,CFJkD,AEIlD,AkCkBA,CpCtBsB,EAA+B,AEIrD,CFJsB,EAAkC,AEIxD,AmBHqB,CrBDC,AoCoBxB,AfnBS,ErBDoD,AoCuB3D,AftBoD,CrBD9B,EAAwC,CAAxC,CqBCf,CrBD0D,AqBCjE,CrBDsB,CoCoBxB,CpCpBsE,CAA9C,AoCwBtB,EpCxBuE,CAAjD,EAAoD,CAApD,AoCoBxB,EpCpB+E,AoCwB/D,CpCxBQ,CCSlB,ADTC,aCSY,QAAb,CAAsB,QAAtB,CAAJ,EAA8B;AuCS9B,AvCRE,ACLF,A6BlBF,ADaI,AQbJ,ADAA,ADuCE,AhB9BsB,ACMvB,AMHa,ACZd,AWCA,A3BDA,CSGO,CnBeL,A4BLE,AVJoB,CUInB,AVJoB,AOEsB,C1BY3C,C6BVG,AVJoB,CUIzB,AVJ0B,EoBsBpB,AvCRA,AmCgBA,ChB9BuB,EnBcpB,GuCQG,CpBtBuB,EoBsBpB,CtCbf,AkBTsC,CoBsBtC,AtCbA,CDKE,eCLF,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;ADMC,ADVI,AEKL,A6BnBF,ADaU,AE8BJ,AM3CN,ADAA,ADuCU,AhB9BR,AOIA,ACbF,AWCA,A3BDA,CQIiF,ClBe/E,A4BNQ,AHAR,C1BSA,A6BTS,AVHT,CgB6BQ,CN1BG,C9BCA,A8BDC,CM0BD,EnCfJ,AmCeM,EJIJ,EL9BE,EAAE,C3BCQ,AgC6BjB,E9BxBJ,CFLwB,AEKxB,A8BwBiB,AIJX,CpCzBmB,CAAD,EAAI,AgC6BP,ChC7BG,EAAO,AgC6Bd,ChC7BO,AgC6BC,EhC7BS,CCUvB,ADVa,EAAa,CCUvB,ADVU,CCUT,CDVyB,AEKxC,AyBN0B,C3BCF,AEKxB,EFL2C,CEK3C,CFLwB,AEKxB,CDKO,A0BbsC,C3BGE,CEK/C,CFLwB,AEKxB,A8BwBiB,C9BxBjB,A8BwBI,ChC7B+C,CAA3B,CEKxB,CFLsD,CAA9B,CEKxB,CFLyD,CAAjC,EAAoC,CAApC,EAAuC,EAAvC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAApD,EAAuD,CAAvD,CAAnB,OCUM,cAAa,QAAb,CAAsB,QAAtB,CAAJ,EAA8B;AuCSrC,AvCRE,ACLF,A6BpBF,ADaE,AE+BG,AM5CL,ADAA,ADuC2B,AhB7BvB,AOIF,ACdF,AWCA,A3BDA,CkBWwB,C5BStB,AkBVE,AOIF,CGAA,AVJA,CnBeE,AmCcuB,CJDvB,EQLG,AVtBiB,AM4BM,CnCdtB,A0BXA,CGCN,AMwB8B,CTzBtB,CamBC,AvCRA,A+BmBA,IQXI,ARWA,GQXG,AtCbhB,CsCaA,AtCbA,CDKE,CuCQiB,IAAI,GAAG,CAA1B,EAA6B,CRWpB,EAAuB,CQXC,AtCbjC,CAAA,CsCaA,EAAqC,CtCbrC,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;AsCcE,AvCRD,ADXI,AEMN,A6BrBD,ADeI,AE8BE,AM7CN,ADAA,ADuCQ,AhB7BD,AOIK,ACdZ,AWCA,A3BDA,CVYA,C4BGI,AVLG,CnBcE,ACZG,A4BGP,AVLG,COII,CGCL,AVLG,AOIG,C3BCA,A8BAX,AMwB6C,AhB7BpC,COII,CAAL,CaoBD,AvCRA,AmBhBK,GYmCF,CQXC,CAAC,CxCnBQ,AoBLF,EoBwBH,ARWA,CQXb,AxCnBqB,AoBLF,CpBKG,AEHE,CsCsBR,AxCnBK,AgC8BL,CQXC,CxCnBQ,CAAJ,CwCmBD,CAApB,AxCnB4B,CAAP,CwCmBE,CAAC,AxCnBO,CAAV,AoCwB6C,CILlE,AvCRS,AmCa0D,CpCxBjC,CwCmBN,AxCnBP,CCWT,CAAC,ADXwB,CAAhB,EAAmB,AoCwB0B,CpCxB7C,CoCwBuD,CpCxBjC,CCWtC,ADXgB,EAAyB,CAAzB,EAA4B,CAA5B,AoCwB6C,EpCxBd,AgC8BvB,AINyD,CpCxBjE,CEHb,CFG+C,EAAlC,CoCwB6C,CpCxBP,AoCwB7D,CpCxBuB,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,AgC8BL,C9BjCQ,CFG+C,AgC8BvB,ChC9B3B,CEHG,CFGkD,CEHlD,CFGH,AEHzB,A8BiCyD,ChC9BlD,KgC8B6C,EAAhC,E/BnBP,A+BmBsD,KAAK,MAApD,CAAd,E/BnBoB,QAAb,CAAsB,QAAtB,CAAJ,EAA8B;AuCSjC,AvCRF,A8B3BJ,ADeU,AQfV,ADAA,ADwCE,AhB9BA,AOIgB,ACdlB,AWCA,A3BDA,CQIiF,CUWvE,AVXH,CUWI,C7BYP,A0Bbc,CGCL,AHDM,EAAE,C1Bab,AmCaA,GILG,AvCRA,IuCQI,KvCRX,KuCQqB,GAAG,CAAtB,EAAyB,UAAU,GAAG,CAAtC,EAAyC,UAAU,EAAnD,EAAuD;AACrD,AvCRL,ADZI,AESD,A6BzBN,ADeE,AE+BI,AM9CN,ADAA,ADwCU,AT1BA,ACdV,AWCA,A3BDA,CkBWwB,E7Bef,A6BVP,AHL6C,CS6BrC,EpCxBG,AESA,CkCeA,EnCZJ,AmCYM,EJMJ,E9BrBL,CsCWQ,AtCXM,CFTE,GAAG,CAAC,AoCwBlB,CpCxBiB,EAAI,CwCoBN,AxCpBE,EAAO,CwCoBN,AxCpBD,CgC8BnB,ChC9B6B,CAAV,CCYZ,A+BkBiB,CQVC,AxCpBO,CwCoBN,AxCpBP,CCYT,CAAC,ADZwB,CAAhB,EAAmB,AgC8BP,ChC9BZ,EAAsB,CCYtC,ADZgB,CwCoBiB,CAAC,AxCpBO,CAAzB,EAA4B,CwCoBN,AxCpBtB,EAA+B,CwCoBN,AxCpBzB,CwCoBiB,CAAX,AxCpB4B,CwCoBnD,CxCpBiB,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,EAAkD,EAAlD,EAAsD,EAAtD,CAAlB,QCYM,cAAa,QAAb,CAAsB,QAAtB,CAAJ,EAA8B;AuCS/B,AvCRJ,AC0BF,A6BvDF,ADgBI,AE8BmC,AM9CvC,ADAA,ADwC2B,ATzBzB,ACfF,AWCA,A3BDA,EVuDE,A4BvCE,AHDF,CGCG,C7BaD,AmCWuB,CNxBpB,CAAL,CMwB4B,CIHtB,AvCRA,A+BiB+B,AL/B/B,CSyBwB,CTzBtB,C1BcC,A0BdA,EzBwCT,A8BTmC,CQTvB,AtCkBA,CsClBC,EvCRX,EuCQI,CAAY,GtCkBN,GAAkC,GsClBnB,CAAC,CAAC,GAAG,CAAJ,GAAQ,ItCkB0B,CAAC,CAA/D,EAAgE,EsClBrC,CAArB;AACD,AvCRJ,ADbI,AEuCH,A6BxDJ,ADgBU,AE8BoC,AM9C9C,ADAA,ADwCQ,AT7BuC,ACX/C,AWCA,A3BDA,CeWO,CGKG,C7BYD,A6BZE,EAAE,C9BCA,AoCuBkC,EJMD,C/BhBrC,AC0BA,KFvCY,AgC6B+B,EAAE,ChC7B9B,CAAC,AEuCrB,EFvCoB,CEuCH,A8BVsC,ChC7B9B,AgC6B+B,ChC7BpC,EAAQ,CAAR,CgC6ByC,ChC7B9B,AEuCP,A8BVsC,ChC7B1C,AoCuB8C,CnCVzD,AmCU0D,CpCvBjC,CAAd,CCaR,CAAC,ADbwB,AgC6BmB,ChC7BpC,EAAoB,AEuCvB,A8BVsD,AINL,CJMX,ChC7BnC,AoCuBwD,EnCVvE,ADbuC,CAAxB,AEuCkB,EFvCS,CAA3B,EAA8B,AoCuBgB,CpCvB9C,CoCuBkE,CpCvBjC,AEuCpC,CFvCG,EAAoC,AEuCP,CFvC7B,CoCuB8C,CpCvBP,AoCuB7D,CpCvBsB,EAA0C,CAA1C,EAA6C,AEuChD,CFvCG,EAAgD,AEuCP,CFvCzC,EAAmD,CAAnD,EAAsD,CAAtD,CAAjB,QEuC0E,CAAC,CD1BrE,QC0BoE,CAA7E,KD1BsB,QAAb,CAAsB,QAAtB,CAAJ,EAA8B;AACnC,AC0BD,A6BzDH,ADgBE,AE8BmC,AM9CrC,ADAA,ADyCE,AhB5BK,AQbP,AWCA,A3BDA,CkBWwB,EAMtB,C7BcE,EmBlBS,CYiCiB,C/BftB,A+BeF,AILE,GnCVG,MmBlBa,EnBkBpB,AmCUe,ChB5BQ,CAAC,CgB4BN,IhB5BK,EAAgB,IgB4BX,EhB5BL,CgB4BQ,ChB5BwB,SgB4BrC,GAA0B,GAA1B,GAAgC,GAApD;AIFI,AvCPH,ADbI,A8BFH,AMyBF,AhB7B2D,EUIzD,AVJyD,CnBOjB,A6BHvC,AVJsD,CnBoBzD,C6BhBK,C9BEM,A8BFL,CAAN,CMyBM,GIHG,AxCpBO,GAAG,CwCoBN,AxCpBO,IoCuBH,GAAG,CpCvBD,EwCoBI,AxCpBO,GwCoBJ,CAAtB,EAAyB,CJGC,CpCvBX,EAAqB,AoCuBP,MIHM,GAAG,CAAtC,AxCpBe,AoCuBC,EIHyB,AxCpBO,CoCuBN,GAA1B,GAAgC,EpCvBjC,CwCoBoC,AJGvD,CpCvB+D,CwCoB3D,EAAuD,MxCpBxC,EAAuD,QAAvD,CAAd,EAEP;AwCmBQ,AvCNN,ADZF,AEeW,A4BpBA,AE8BL,AM9CN,ADAA,AD0CE,AhB9B8D,AOKzD,ACjBP,AhBAA,EkBgBW,AVJqD,CUIpD,EAAE,CHCD,ESyBL,ClCNC,EAAE,A8BUA,C9BVC,EsCGE,EROR,GAAa,E9BVP,CkCMU,CJIC,CQPC,AtCHsB,AyBnBf,CSyBL,CJIP,CQPQ,AROA,AL7BuB,KasBlB,AROA,CQPC,AROA,CL7BC,EK6BP,AIJU,CJIC,CL7B6D,CSyB3D,ClCNsB,A8BUzB,C9BV0B,CAApD,CsCGgC,CAAC,AtCHoB,A8BUlB,CAAC,GQPC,AROE,CAAC,CIJjD,CIHiD,CAAP,GAAW,CAAZ,CAAX,AROe,CQPvC,CROsC,EAAiB,GAAjB,CAAnB,CAAR,CAAb;AQNE,AxClBR,AEeI,A4BrBF,AE+BG,AIJH,AhB/ByD,AOMzD,CGRsB,AVEG,EUKzB,GVL6E,CUFvD,AVGtB,CoB2BM,AJGA,CNzBN,E5BmBS,GsCGG,CAAC,AtCHA,IsCGP,CAAY,EtCHT,CAAY,OsCGO,CAAC,CAAC,AtCHrB,CAAP,EsCG+B,CAAJ,GAAQ,UAAT,CAAtB;AACD,AtCHJ,A4BpBC,AE8BD,AMhDH,ADAA,AD2CU,AhB9BN,AOMF,ACnBF,AhBAA,EkBkBI,AVLA,CUKC,AVLA,CgB8BK,CNzBH,AVLA,CUKC,AVLA,CUKN,CHCM,CPNG,AOMF,GAAG,EPNI,EOMA,CPNG,EgB8BX,EhB9BN,EOMU,EAAV;AauBG,AvCRH,A6BhBS,AQlBX,ADAA,AD2C2B,AhB9BF,AOQvB,ACrBF,AhBAA,EkBkBW,AVLc,CUKb,AVLc,CgB8BC,CNzBb,AVLc,CAAC,EOQrB,C1BaC,AmBrBuB,MAAM,EOQrB,CPRwB,EOQrB,EAChB,GAAG,kBADa;AasBjB,AtCHgB,A4BtBjB,AEhBW,AMFb,ADAA,AD2CQ,AhB9BN,AQbF,AhBAA,CkBUwB,AVEuD,CUM5D,CVJjB,GgB6BuC,GlCHhC,A8BtCA,IAAI,CAAgB,K9BsCV,CAAC,E8BtCP,C/BiCU,C+BjC4C,E/BiCzC,CAAC,ECKR,EAA4B,CkCGoB,CAAC,CnCR7C,CAAY,GAAZ,CAAgB,CAAC,OmCQ2B,CAAjE;AnCRwC,ACMtC,A4B/BoB,AEPpB,AMHJ,ADAA,AD4CE,AhB9BE,AOSA,ACvBJ,AhBAA,CkBUA,CVII,CAAC,CnBqBqC,A0BZtC,C1BYoC,AmBrBjC,CAAC,EYXA,AIyCA,ChB9BG,AOSF,CAAC,CzBkBC,CAAC,CAAC,AkCGA,ChB9BG,EYXZ,AIyCY,ChB9BG,COSV,ESqBW,AhB9BlB,AOSgB,CSqBG,GAAL,CAAS,UAAU,ElCHE,CAAC,AkCGA,SlCHD,CAAjC,AkCGY,IAAoC,CAAlD;AICA,AvCV2C,ACO1C,A8BtCC,AMJJ,ADAA,AD6CE,AhB/BsB,AOUlB,ACxBN,AhBAA,EQcwB,EnBqBqB,I+B/BrC,AIyCA,CIAC,IRzCL,ALoBS,CSqBC,CIAZ,EJAe,IAAI,CAAC,GAAL,CAAS,UAAU,CTrBd,ESqBiB,ETrB1B,EAAe,MSqBX,ETrBJ,CAAP,CSqB+C,CAAnD;AICD,AvCXuC,A6BdjC,AQrBP,ADAA,AD+CE,AhBjCA,AOWG,ACzBL,AhBAA,C4BkBA,ApBN+E,EnBuBxC,AmBpBrC,EOMkB,CGAP,E7BcwC,CmCY5C,EnCZ+C,CAAC,IAAI,CAAC,EAAvC,EAA2C,C6BdrC,G7BcN,A6BdS,C7BcuC,A6BdvB,G7BczB,CAAoD,WAAW,IAAI;ACSxE,A4BvBgC,AEf9C,AMNJ,ADAA,ADgDI,AhBjCA,AQfJ,AhBAA,EkBqBkD,AVN9C,CnBmBF,AmBnBG,CgBiCD,ChBjCG,CAAC,EUMwC,AEfxC,C9BsCC,AkCIA,AhBjCE,EgBiCA,GhBjCK,EYTA,CZSG,ClB6BD,CAAC,EkB7BjB,KgBiCwB,ElCJR,A8BtCU,CI0CC,ClCJiB,C8BtC1C,EAA6B,EI0CP,GAAY,KAD7B;AICT,AvCXC,ACQG,A4BxBsD,AEdpD,AMPN,ADAA,ADiDI,AhBlCqB,AOWrB,AC1BJ,AhBAA,CXmBA,C6BE0D,AVNjC,CUMuB,AVNtB,CgBkCtB,ATvBA,CPXwB,CoBiCtB,ARzCA,AZQuB,GAAG,CgBkCtB,ATvBA,CzBmBC,AyBnBA,CzBmBC,AkCIA,ClCJC,C8BtCC,CZQwB,EoBiCrB,ARzCA,CZQwB,EoBiCpB,EbtBX,EAAY,CKnBG,CAAC,CI0CC,GIDP,AJCU,EJ1Cb,EQyC4B,CRzCV,AI0CR,ClCJS,CAAC,CkCIC,GJ1CG,CAAC,EIwCjC,ElCF2B,CAAhC,G8BtCa,IAAqC,IAArC,GAA4C,KAAvD;AQ0CJ,AtCHC,A4BzB0D,AEbvD,AMRN,ADAA,ADkDI,AhBnCF,AOYI,AC3BN,AhBAA,CQY+E,CUSlB,CAAb,AVL9C,CgBkCE,EJ1CE,EQyCE,CJCC,EJ1CE,AI0CA,ETvBE,CKnBC,IIuCL,IJvCH,CQyCiB,GAAqB,EAA1C,KbtBkB,IAAP,EAAa,WAAb,CAAP;AauBJ,AvCTF,A6BpBgE,AEZ3D,AMTL,ADAA,ADmDI,AhBnCA,AOYC,AC5BL,AhBAA,EkBqBgE,AVL5D,CAAC,CgBmCD,CN9B4C,AEf5C,AZUG,AOKa,C1BoBd,AmBzBE,EoBkCA,CpBlCG,EYPA,GZOK,GAAG,GoBkCC,CvCTC,AmBzBnB,EoBkCqB,CvCTC,CAAxB,UuCSmC,CAAC,UAAD,CAAjC,CAF2C,CAI3C;AvCVF,ACMe,A4B3BsD,AEX/D,AIqCG,AhB/BgB,EUK4C,AVL5C,CgB+BvB,AhB/BwB,EAAE,CnB0BtB,AmB1BuB,EnB0BrB,CCMC,AkBhCuB,EnB0BrB,CAAC,A+BhCA,C/BgCC,ECME,AkBhCuB,ClBgCtB,CDNL,A+BhCM,CZMwB,CnB0BtB,CAAC,A+BhCA,C/BgCT,EAAY,CAAC,CCMT,A8BtCU,CAAC,C9BsCS,CDNxB,EAAmB,A+BhCV,CAAW,C9BsChB,EDNJ,ACMqC,EDNZ,CAAzB,EAA4B,A+BhCnB,CAAd,G/BgCK,CAAX;AuCWE,AvCVF,ACMI,A4B5B4C,AEV1C,AI0CL,AhBrCC,AOaE,AC5BJ,AhBAA,CkBoBgC,AVT+C,EUSA,AVJ7E,COYE,EawBE,AvCVA,A+BhCA,E/BgCE,GuCUG,AvCVA,ACMA,CDNC,A6BtBoB,AHQpB,EawBE,AR1CA,CQ0CZ,AbxBU,C1BcD,C6BtBmG,AEV7F,C/BgCC,CAAP,EAAU,CAAC,A+BhCA,C9BsCC,A8BtCA,C9BsCC,A8BtCF,CAAhB,C/BgCK,EAAiB,CAAC,IAAlB,ACMsB,EDNE,CAAxB,ACMyB,EDNE,GCMf,CDNZ,CAAX,ACM2C,CAApB,CAAnB;AsCKF,AtCJC,A4B5BD,AEVI,AZKF,AOaE,EawBJ,ApBrCE,CAAC,EAAE,CoBqCD,AVhCA,AEVA,AZKE,CoBsCH,EpBtCM,EoBqCT,AR1CS,CQ2CD,CAAC,AbzBE,CKlBC,AZKE,CUKD,CUiCL,CpBtCS,CoBsCH,AR3CE,EFUE,AVLlB,CYLY,CQ2CJ,AR3CY,KQ2CE,AR3CG,CAAC,GAAN,CAAW,GAAD,ELkBV,EKlBmB,CAAC,CLkB7B,CAAP,CKlBuC,CAAC,EFUT,CAA/B,IAAoC,CEVA,EAAD,EAAiB,GAAjB,CFUU,AEV7B,CAAR,CAAR,GFUkD,0BAAiB,CAAvE,EAA0E;AUkCtE,AvCZN,A6BrBI,AEVC,AI0CL,AhBtCwB,AOcnB,AC9BL,AhBAA,EQgBwB,EoBuClB,CbnCc,C1BuBd,CuCYG,CAAC,CJDD,CNhCC,KUiCJ,EVjCW,CUiCG,EVjCA,I7BqBI,GAAI,E6BrBC,CUiCG,AvCZL,CuCYM,CJDjC,CAAiC,CnCXkB,A6BrBjB,EUiCF,CAA1B,GJDN,EAA0D,QAA1D,EAA6E,MAA7E,ENhCmD,AMgCwC,CNhCvE,GAAmC,GAAG,GAAG,CAAzC,GAA6C,GAAG,GAAG,CAAnE;AUkCE,AvCb6C,ACcjD,A4BlCE,AMgCF,AhBvCA,AQhBF,AhBAA,CQW+E,ClB8C7E,CkBxCA,CoBuCI,KJDG,ENhCE,C5BkCC,GAAA,IsCDS,CAAC,IAAhB,CAAqB,GAArB,EAFkB,AJCN,CIEZ,MJFG,INhCsB,AMgCF,GNhClB,EAAyB,EMgC3B,GAA8B,ENhC5B,EAAkC,MAAlC,CAAP,WMgC+C;AIG7C,AtCAF,A4BlCD,AEVC,AIyCiD,AhBtCjD,AOcA,AC/BJ,AhBAA,EQiBI,CAAC,CgBsCgD,CAAC,AhBtC/C,CAAC,CgBsCgD,CJzChD,CAAC,AZGE,ElByCA,GkCHoD,AhBtC/C,CgBsCgD,CAAb,CJzC/C,AZGe,ClByCD,CAAC,A8B5CA,EZGjB,QlByCS,CAAmB,KAAK,SAAxB,CAAP;ADdF,ACeC,A8B5CG,AIwC6D,AhBtC1C,AOerB,AChCJ,AhBAA,EQiByB,CAAC,CgBsCyC,CAAC,AhBtCxC,CnB2BtB,AmB3BuB,CgBsCyC,ATvB/D,EPfyB,GYFpB,EIwCiE,CAAC,AhBtCxC,CYFtB,AIwCmC,EhBtCV,GYF7B,CAAU,G/B6Bf,GAAG,CAAC,OAAL,4B+B7B0D,QAAQ,EAA5D,CAAN,G/B6BC,cAAa,QAAb,CAAsB,OAAtB,CAAD,KAAmC,mBAAC,GAAG,CAAC,OAAL,0CAAC,cAAa,QAAb,CAAsB,SAAtB,CAAD,CAAvC,EAA0E;AuCetE,AvCdF,A6BpBF,AETG,AIuC4E,AhBtC/E,AOGkB,ACpBpB,AhBAA,CQW+E,CAAxE,COSL,CauCI,AJJ2E,ATvCkB,CAmBjG,GGVM,CUkCG,GALa,AJC2B,CIK7C,GVnCU,GAAG,iBAAiB,CAAC,SAAD,CAAlC;AUoCG,AvCfF,ACeD,A4BnCA,AM6ByF,ATnBzF,ACpCF,AhBAA,EV6DE,CsCRA,CJEyF,CIOtF,GATH,CV3BO,E5BmCE,GAAA;AsCET,AtCDE,A4BpCO,AERP,AIqC+C,ARvDnD,AhBAA,GwBuDuC,CN7B5B,AM6BT,CN7BU,EAAE,CAAC,G5BoCJ,A4BpCO,AERP,IAAI,G9B4CG,CAAC,A4BpCO,AERf,CFQgB,AERJ,CFQd,IUqCG,CR7CiB,CAAC,C9B4CnB,CAAkB,KAAK,MsCChC,CR7CqB,CAAsB,C9B4ClC,CAAP,M8B5CmB,CAAZ,EAA6C,KAA7C,CAAP;AQ8CH,AvChBC,ACeC,A4BrC2B,AEP3B,AIqCF,ATnBC,ACrCF,AhBAA,C4B+CA,CbVE,EGX4B,CAAC,EAAE,C7BsBzB,A6BtB0B,AHW1B,CAAC,EGX4B,G7BsBvB,GAAQ,E6BtBuB,CAAC,KHW5C,CAAwB,SAAxB,EAAmC;A1BWb,A6BtBf,AVFH,AOcF,ACtCJ,AhBAA,GkB0BE,C7BsBsB,C0BVnB,I1BUwB,AmBxBb,EnBwBe,A0BVpB,CAAC,IPdN,CAAkB,MOcpB,GAAsB,OPdpB,EAA+D;AoB0CrE,AvClBsB,ACiBpB,A4BtCD,AENwB,AIqCzB,AhBjCE,AOa0B,ACtC5B,AhBAA,CkBoBO,C5B6CL,CDjBA,GuCkBI,AJRA,ATpBsB,CKjBrB,C9B4CC,AkBxCA,ClBwCC,EyB3BwB,EKjBpB,ALiBsB,CzB2B3B,A8B5CM,E9B4CQ,KsCCD,GAAG,CR7CC,IAAC,CQ6CG,EJRG,GAAG;AISjC,AtCDE,A8B5CA,AIqCF,AhBjCE,AOYsB,ESqBxB,EAAE,AhBjCA,COWiC,CSsB/B,EIQE,GtCDG,A8B5CA,GQ6CG,CpB1CN,EoB0CmB,AR7CvB,C9B4Cc,CsCChB,AtCDiB,MAAR,CAAe,KAAK,SAApB,EAA+B,KAA/B,CAAP;AsCEF,AvCnBA,ACkBC,A8B5CA,AIqCC,AhBjCA,AOYA,ACtCJ,AhBAA,E4BmEE,EJRE,AhBjCA,AOYA,Ga6BG,CAAC,MpBzCM,EAAE,CoByCd,CAAgB,CJRC,CTrBC,CSqBC,CTrBC,C1BUhB,EuCmBJ,CAAwB,AvCnBjB,AmCUH,CnCVI,GuCmBR,CAA6B,GvCnB7B,KuCmBqC,CAAC,gBAAT,CAA0B,mBAA1B,AvCnBzB,CuCmBJ,EAA6E,CAAC,EAAD,EAAK,CAAL,KAC3E,AvCpBe,MuCoBT,CAAC,CvCpBL,CAAsB,EuCoBxB,CAAY,EAAE,CAAC,CvCpBb,CAAJ,EAAoC,CuCoBtB,IAAY,CAAC,GAAG,CAA5B,CADF;AAGA,AvCrBE,AmCWA,AhBlCc,AOYM,EagCtB,EvCrBE,AmCWA,EhBlCc,AOYM,IagCd,AvCrBA,CuCqBC,AvCrBA,A0BXkB,ESsBhB,AhBlCG,AOYe,ESsBhB,CnCXX,C0BXkB,E1BWH,MAAf,EuCqBF,CAA0B,aJVI,cIU9B,EAAuD,OAAvD,CAA+D,CAAC,EAAD,EAAK,CAAL,KAAU;AACvE,AvCrBA,AC5BgB,A4BMb,AEoBY,AIUb,AhBhCqB,AOYU,ACtCrC,AhBAA,GwByDmC,CnCP/B,A+BFA,EFpBS,AVFc,AOYU,IaiC3B,AvCrBA,A+BFA,C/BEC,A+BFA,GLVkC,EAAE,CaiC9B,ERvBE,CQuBC,AvCrBhB,A6BtBuB,EU2CvB,CvCrBmB,A6BtBO,AEoBV,C/BEhB,A6BtB0C;AU4C1C,AvCrBD,A6BvB6C,AEqB5C,AIaF,AhBpCc,AOYM,ACtCtB,AhBAA,EkB4BgD,AMkC9C,CnCdA,CuCwBE,AJVA,CT1BiC,CS0B/B,ENlCwC,C7BuBrC,A+BFA,CQuBC,CAAC,CAAD,CAAN,ERvBW,EQuBE,CRvBb,IAAkB,EQuBE,CAAC,ERvBE,G/BEd,EuCqBI,CvCrBD,CAAC,CuCqBkB,GAAlB,GAAwB,AvCrBhC,EuCqBL,ARvBkB,CAAsB,IAAtB,EAA4B,KAA9C,EAAqD,0B/BE5C,cAAa,QAAb,CAAsB,SAAtB,CAAJ,EAAsC;AuCsB5C,AvCrBC,A6BxBoD,AEsBlD,AIaF,AhBvCI,AOeJ,ACvCJ,AhBAA,EkB4BwD,CU0CtD,AV1C4C,C7BwB1C,AmCWA,EhBpCE,InByBI,CAAC,C+BFC,GAAN,C/BEF,GAAe,AmCWA,EAAE,ChBvCnB,GnB4BE,AmCUE;AIYJ,AvCrBC,AC9BM,A4BKkD,AEuBtD,AIaD,AhBpCF,AOYE,ACxCJ,AhBAA,E4B0EE,AV9CyD,C7BcR,A6BdL,C7B2B5C,AmCSE,GlCzCK,CAAA,AkBKD,ClBLC,GAAI,CsCmDA,AJVA,AhBpCA,CoB8CC,CJVC,ChBpCC,IoB8CH,CAAX,OtCnD2B,CAAC,CAArB,IkBKa,OgBoCU,ShBpChB,IAA0B,4BAAW,gBAAX,CAA1B,GAAyD,gBAAgB,CAAC,MAAxF;AoB+CD,AvCnBC,AChCO,A4BIqD,AEwB3D,AIUG,AhBjCJ,AOYE,ACzCJ,AhBAA,C4BiEA,CVrC8D,CM6B3B,CThB/B,CGb0C,E5BJrC,AyBiBF,CzBjBE,CkBKA,AOYA,CzBjBA,GAAK,OkBKM,KAAK,IlBLK,CAAC,EAAtB,akBK6B,MAA7B,GACH,aAAa,CAAC,wBAAY,OAAZ,CAAD,EAAuB,0BAAa,OAAb,CAAvB,EAA8C,KAA9C,CADV,GAEH,WAAW,CAAC,sBAAU,OAAV,CAAD,EAAqB,wBAAW,OAAX,CAArB,EAA0C,KAA1C,CAFf;AnB4BA,AChCO,A4BG0D,AMsCjE,AhBlCD,AOUK,AC1CN,AhBAA,EkB4BmE,AMsCjE,EAAE,EAAE,ATxBA,CzBjBG,CAAA,CAAA,AyBiBA,GzBjBI,AyBiBJ,gBzBjBoB,CAAC,CAArB;AsCoDT,AvCnBE,AChCO,A4BEqC,AE0B5C,AIaE,ATxBI,AC3CR,AhBAA,CkB4B8B,CE0B5B,CF1B2E,CMuCzE,EJbE,C9B5BG,A8B4BF,CQuBC,AtCnDC,CsCmDA,CtCnDA,E4BEqB,C5BFhB,E8B4BR,ALXS,EGf6F,AE0B1E,EIaf,EAAE,IIUrB,AJXM,CIWoB,GtCnDI,CAAC,EAAtB,asCmDT,AblC2B,EakCoB,EblChC,EAAkB,GakCjC,AblCQ,CakCgD,EAAD,IAAQ,EAAE,CAAC,gBAAH,CAAoB,OAApB,EAA6B,eAA7B,CAA/D;AAEA,AvCpBE,AChCO,A4BEP,AE0BE,AIaA,ATxBG,AC5CP,AhBAA,IwBoEI,ENvCE,C5BFG,CsCoDD,AtCpDC,CsCoDA,AtCpDA,C8B4BC,E9B5BG,CkCyCA,CJbC,CF1BC,AMuCA,EJbmB,GF1Bd,KUkDpB,CAA0B,EtCpDG,A8B4BI,C9B5BH,CAArB,E8B4BwC,SIajB,KNvCK,CAA/B,IAAoC,EUkD1C,EAAuD,KVlDJ,EUkDnD,CAAgE,EAAD,AVlDP,IUkDc,sBVlDG,CAAvE,EAA0E;AUmD1E,AvCpBA,AChCO,A4BEL,AE0BE,AIUA,ARlEN,AhBAA,E4BgFE,CJvBiC,CIuB/B,CAAC,EtCpDI,CAAA,EAAA,A4BEC,EE0BE,C9B5BE,I4BEG,GAAG,CUkDlB,CAAoB,ERxBE,GAAG,E9B5BG,A4BED,CUkD3B,AtCpD6B,EsCoDC,AtCpDvB,A8B4BuB,EF1BE,aUkDhC,CRxByB,CAAsB,WF1BE,AE0BxB,CF1BP,AE0Bd,GF1BiD,GAAG,GAAG,CAAzC,GAA6C,GAAG,GAAG,CAAnE;AUmDH,AvCpBC,AChCO,A4BEL,AMuCF,AT7BO,ACzCT,AhBAA,C4B+EA,CJTE,EAAE,CTlCiC,CSkC/B,ClCzCG,CAAA,CAAA,E4BEE,C5BFE,gBAAgB,CAAC,CAArB,S4BEoB,OAAlB,EAA2B,GAA3B,EAAgC,MAAhC,CAAP;AUoDJ,AvCrBE,AChCO,A4BEN,AEyBG,AIcF,ATzBA,ISyBA,ATzBA,GzBhBK,CAAA,EAAA,C8B2BE,ALXA,EzBhBG,AyBgBD,EaqCE,ER1BE,EIcE,CJdb,CIce,GJdG,EIalB,GlCxCwB,CAAC,EAAtB,EAuCT,E8BZoC,CAAC,KAA/B,EAAsC;A/BM1C,A+BLM,AIcJ,ATzBE,AC9CN,IQuEI,ETzBE,EKWE,CLXC,GAAA,CSyBI,EAAE,CJdC,CAAC,GAAD,EAAM,WAAN,CAAR,OIcwB;AnCR9B,ACMF,A4BrCE,AE0BK,AIWD,ATtBE,QGfA,C5BqCC,MyBtBM,CGfC,GAAG,E5BqCnB,CAAsB,QAAtB,EAAwC,E4BrCN,CAAC,EHeZ,EzBsBvB,EAAuD,AyBtBxC,CAAP,EGf0B,CAAhC;A7BgCA,ACMA,A4BrCA,AMuBiC,ATR5B,AChDP,CQwDA,QlCcS,A4BrCA,C5BqCE,QAAQ,GAAG,OAAZ,GAAuB,OAAxB,IAAmC,OAA1C;AACD,A4BtCU,AE0BL,AIgBN,AR3EA,IEiCW,CAAC,EAAE,CAAC,GAAG,EE0BL,MF1Ba,CAAC,CAAlB,IE0BH;AF1BwB,AE2BzB,ALfQ,AC7Cb,IEiC8B,CAAC,AEqB3B,ALnBiC,EGFJ,CAAC,GAAG,QAAQ,CAAC;A7BiC5C,A6BjCO,AHiBL,AClDJ,GEiCE,CHiBE,K1BgBK,K0BhBK,EAAE;AGhBf,AE2BG,ALXc,AClDlB,CE2BO,KHuBW,KKWP,ALXY,EAAE,GKWT,MAAL,C/BMY,A+BNA,G/BMG,CAAC,A+BNhB,CAAP,ILXwC,CAAC,C1BiBtB,CAAY,GAAZ,CAAgB,CAAC,E0BjBI;A1BiBF,A+BLvC,ALZa,AClDhB,I3BmE0C,CAAF,A0BhCH;A1BgCQ,AmCc7C,AT9BI,ACnDJ,I3BmE6C,A0BhBzC,MAAM,EAAE;A1BgB4B,A+BHtC,AIkBF,AT9BM,ACpDN,EIgEE,C/BGqC,EAAW,CAAX,A0BfjC,EKYE,CAAC,ALZA,E1Be8C,C0Bf9C,MKYD,EAAgC;A/BIlC,A6BhCC,AE6BH,AIkBJ,AT9BQ,ACrDR,I3BoEM,CAAC,C6BhCM,G7BgCF,C+BHD,KLZK,CGjBQ,AE6BP,GF7BU,AE6BU,CF7BM,GAAhB,C7BgCA,C6BhCwB,E7BgCrB,EAAE,CAAC,A+BHG,C/BGJ,CAAzB,E6BhCoB,AE6ByB,CLZ7B,IGhBpB,AHgBa,CAAP,EGhBH,CAAC,QAAJ,GAAe,gBAAgB,CAAC,GAAD,EAAM,SAAN,CAA/B,GAAkD,cAAc,CAAC,GAAD,EAAM,SAAN,CAD3D;A7BiCD,A+BHA,AIkBN,AT9BO,ACtDP,I3BqEM,CAAC,IAAI,G+BHC,SAAS,G/BGK,A+BHG,EAAvB,C/BGuB,EAAE,CAAC,CAAD,CAAzB;AACA,AmCeN,WnCfa,GAAG,CAAC,IAAI,CAAC,EAAhB;AACD,A+BJC,AImBN,ATnCY,AClDZ,G3BkEuB,CAIjB,C0BpC+B,OKgCzB,YAAY,GAAG,KAAK,gB/BIkB,A+BJvB,CAAsB,K/BIO,CAAC,KAAK,A+BJnC,CAArB;AIoBN,AT/BI,G1BUF,C0BVE,MAAM,EAAE;A1BiBX,A+BLK,AIoBN,AT/BM,ACxDN,C3BwCA,K0BgBM,GAAG,CKWC,ELXD,IKWO,GAAG,YAAY,CAAC,MAA1B;AIqBN,AT/BQ,ACzDR,eDyDe,oBAAO,IAAP,CAAP;A1BiBR,A+BLM,AIoBN,AT/BO,AC1DP,M3B0EM,K+BLK,MAAM,G/BKG,A+BLd,G/BKkB,C+BLA,E/BKD,IAAa,M+BLA,CAAC,KAA/B,EAAsC;A/BM1C,A+BLM,AIqBR,AR3FA,YIsEY,SAAS,CAAC,GAAD,EAAM,WAAN,CAAb,EAAiC;A/BMvC,A+BLQ,AIqBV,ATrCY,ACvDZ,KDkCqC,KKqC3B,MAAM,GAAG,GAAT;A/BMR,A+BLQ,AIqBV,ATjCI,AC5DJ,ID4DI,MKYM,ELZE,EAAE,KKYK,CAAC,IAAV,CAAe,MAAf;A/BMR,A+BLO,AIqBT,ATjCM,AC7DN,MD6DM,GAAG,GAAA;A1BkBP,A+BLK,AIqBP,ATjCQ,AC9DR,eD8De,wBAAS,IAAT,CAAP;A1BkBN,AmCgBF,ATjCO,AC/DP;A3BiFE,A+BLI,AIqBN,ARjGA,aI4Ea;A/BMX,A+BNa,AIsBf,ATtCc,KA1BuB,GK0CtB,KAAK,EAAE,SAAT;A/BOX,A+BP+B,AIuBjC,ATlCI,AChEJ,IDgEI,IKW6B,OLXlB,EAAE;A1BmBf,A+BRW,AIwBb,ATnCmB,MAAA,CKWb,ILXkB,EAAE,oBAAoB,CAAC,SAAD;A1BoB5C,A+BRG,AIyBL,ATrCiB,AChEjB,KI+DI,AL9BiC;A1BoDnC,AmCiBF,ATrCI,ACjEJ,IDiEI,K1BoBK,C0BpBC,EAAE;AKaR,AIyBJ,ATtCc,ACjEd,MDiEc,KKaH,ALbQ,EAAE,GKaL,MAAL,C/BQY,A+BRA,ELbU,C1BqBP,A0BrBQ,C1BqBP,E+BRhB,CAAP,E/BQmB,GAAY,A0BrBF,I1BqBM,gFACnC,GAAG,CAAC,CACN,IAAI,GAAG,CAAC,CAAC;A+BTR,AIyBH,ATvCY,ACjEZ,KDiCqC,uB1BwDT,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;AmCgB1C,ATvCI,AClEJ,IDkEI,GAAG,EAAE;AKeP,AIyBF,ATvCM,ACnEN,EIiFE,C/BIA,G0BlBI,GAAG,EKcE,CAAC,ALdH,SKcE,EAAgC;A/BW1C,A+BVG,AIyBJ,ATvCQ,ACpER,C3ByEA,S+BSU,KLdK,IKcI,GAAoB,WAAD,IAAgB,QLd3B,IAAZ,EAAkB,GAAzB;AKeF,AIyBN,ATvCO,ACrEP,YImFY,SAAS,GAAQ,EAAvB;A/BWC,AmCeP,AR7GA,M3B8Fa,MAAM,GAAI,GAAD,IAAgC;AACpD,A+BXI,AI0BN,AT5CS,AClET,KDiCqC,C1B8D/B,MAAM,A+BXA,G/BWG,EAAb,O+BXsB,GAAG,KAAK,gBAAL,CAAsB,WAAtB,CAArB;A/BYJ,AmCeF,ATxCI,E1ByBF,E0BzBE,CAAC,EAAE,C1ByBC,IAAI,WAAW,CAAC,GAAD,CAArB;AACA,A+BZI,AI2BN,ATxCM,ACvEN,E3BgGE,I0BzBI,E1ByBE,C0BzBC,CKaC,E/BYE,A0BzBH,IKaO,GAAG,W/BYW,CAAC,A+BZA,CAAC,E/BYF,CAA5B,G+BZI;A/BaJ,AmCeF,ATxCQ,E1ByBN,MAAM,IAAI,G0BzBG,MAAM,CAAC,I1ByBI,CAAC,GAAD,A0BzBX,C1ByBb,A0BzB6B,CAAC,CAAC,GAAF,CAAM,IAAN,CAAhB,IAA+B,CAAC,CAAC,GAAF,CAAM,IAAN,CAA/B,GAA6C,CAAC,KAAK,CAAN,GAAU,KAAK,CAAnE;A1B0BN,A+BZI,AI2BN,ATxCO,ACzEP,ODsEO,E1B4BE,E+BZE,I/BYT,E+BZe,GAAX,IAAkB,YAAY,CAAC,KAA/B,EAAsC;A/Ba3C,A+BZO,AI2BR,ARlHA,C3B6FO,W+BNK,CAAC,SAAS,CAAC,GAAD,EAAM,WAAN,CAAd,EAAkC;AAChC,AI4BV,AT1CM,AC1EN,MD0EM,GAAG,CAAC,EAAD,EAAW,GKcH;AAAE,AI6BnB,AT1CQ,AC3ER,QD2EQ,CAAC,CAAC,EKaS,CLbX,CAAM,GKaU,CLbhB,CKakB,CLbN,EAAZ,MKaS;AAAoB,AI8BrC,AT1CO,AC5EP,YIwFqC;AAApB,AIgCjB,ARxHA,WIwFU;AACD,AIgCT,ATnDO,ACtEP,KDgCqC;AS0FrC,AT5CI,AC9EJ,ID8EI,KAAK,EAAE;AKYH,AIiCR,AT5CM,AC/EN,MD+EM,EKWE,CLXC,GAAA,EKWK,GAAG,GAAT;AACA,AIiCR,AT5CQ,AChFR,QI2FQ,OLXO,EKWE,CAAC,IAAV,CAAe,MAAf,ILXa,IAAN,CAAP;AKYD,AIiCP,AT5CO;AS6CP,AR7HA;AI6FM,AIiCN,ATjDW,KA9C0B,QK8DxB;AAAE,AIkCf,AT7CI,AClFJ,IDkFI,CAAC,EAAE,CKWQ,KAAK,EAAE,SAAT;AAAoB,AIoCjC,AT9CM,ACnFN,MDmFM,EKU2B,CLVxB,GAAA;AKUI,AIqCb,AT9CQ,ACpFR,OI6FM,QLTS,4BAAW,IAAX,EAAiB,CAAxB;AKUH,ALTE,ACrFP,KIgFI;AJhFJ;AIgGI,ALdG,AClFP,KD+BqC,MKiE1B,KAAK,MAAL,CAAY,SAAZ,CAAP;AACD,ALVC,ACvFJ,IDuFI,CAAC,EAAE;AACD,ACxFN,MDwFM,GAAG,GAAA;AKWP,ALVM,ACzFR,EImGE,QAAQ,CAAC,ILVI,MKUL,EAA0C,oBLV1B,IAAX,EAAiB,CAAxB;AKWJ,ALVG,AC1FP,UIoGU,QAAQ,GAAoB,WAAD,IAAgB;AAC/C,YAAM,SAAS,GAAQ,EAAvB;AACA,ALfC,ACtFP,UIqGU,MAAM,GAAG,KAAK,gBAAL,CAAsB,WAAtB,EAAmC,MAAnC,IAA6C,KAAK,MAAL,EAA1D;ALvE+B,GAAnC;AKyEI,ALVJ,AC7FF,SD6FS,EKUE,ILVI,CAAC,CKUC,UAAX,IAAyB,CLVtB,CAAwB,SAAxB,EAAmC,gBKUA,UAAb,EAAyB,MAAzB,EAAiC,KAAK,MAAtC,CAAzB,EAAwE;AACtE,ALVJ,AC9FJ,ID8FI,IKUI,ELVE,EAAE,EKUE,GAAG,UAAT;AACA,ALXM,AC9Fd,MD8Fc,EKWN,GLXW,EAAE,IKWJ,CAAC,IAAV,CAAe,KLXa,CKW5B,ALXgC,SAAJ;AKY7B,ALZK,AC9FZ;AD6F4C,AC7F5C,GD6FS,CAAP;AKeI,ALZL,AChGD,CDSO,YKmGM;AAAE,AJ5Gf,QI4Ge,KAAK,EAAE,SAAT;AAAoB,AJ5GjC,QI4GiC;AAApB,AJ5Gb,OI4GM;AACD,ALAL,AC7GA,KImGI,ILUK,mBAAT,CAA6B,SAA7B,EAA2D;AACzD,QAAM;AKCJ,ALDM,AC7GV,ID6GU,OKCC,KAAK,MAAL,CAAY,QAAZ,CAAP;AACD,ALFK,MAAiB,SAAvB;AC7GF;AIiHE,ALFA,AC/GF,EIiHE,GAAG,CAAC,ALFA,QKED,EAA6B,WLFnB,UAAT,CAAJ,EAA0B;AKGxB,ALFA,AChHJ,QDgHS,CKEA,MAAM,GAAX,ALF2B,CAAC,GKEV,ILFb,CKEkB,ELFe,CAAjC,IAAuC,SKE1B,CAAsB,ALF0B,CAAC,GKEjD,EAA4B,ELFF,GKE5C,ALF6E,CAA7E,CKEqD,CLF2B;AKG9E,ALFA,ACjHN,MImHM,OLFO,CKEC,CLFC,GKEG,ALFC,QKEO,CAAC,GAAD,EAAM,IAAN,CAApB;AACD,ALHQ,ACjHb,ODiHM;AACD,AClHL;AIqHI,AJrHJ,WIqHW,IAAP;AACD,ALFC,ACpHJ,UDoHU;AAAE,ACpHZ,MDoHY,KAAF;AKIA,ALJS,ACpHnB,EIwHU,ILJS,EKIH,CAAC,WAAD,EAA4B;AACxC,ALLM,QAAoB,EKKpB,OAAO,CLLb,EKKgB,IAAI,IAAJ,CAAS,KAAK,YAAd,EAA4B,KAAK,KAAjC,CAAhB;AACA,AJzHJ,IIyHI,OAAO,CAAC,gBAAR,GAA2B,WAA3B;AACA,ALNA,QAAI,GKMG,ELNE,GAAG,CAAR,CKMJ,GLNiB,MAAM,GAAG,CAA1B,EAA6B;AKO9B,ALNG,ACrHN,aDqHa,oBAAoB,CAAC,SAAD,CAApB,KAAoC,oBAAa,MAAjD,GACH;AAAE,ACtHZ,QDsHY,OAAO,EAAE,KAAK,GAAG,IAAI,CAAC,IAAL,CAAU,CAAV,CAAnB;AK/HO,AL+H0B,ACtH3C,QDsH2C,OAAO,EAAE,MAAM,GAAG;AAAnD,ACtHV,ODqHa,GAEH;AAAE,ACvHZ,QDuHY,OAAO,EAAE,KAAK,GAAG,CAAnB;AAAsB,ACvHhC,QDuHgC,OAAO,EAAE,MAAM,GAAG,IAAI,CAAC,IAAL,CAAU,CAAV;AAAxC,ACvHV,ODqHM;AAGD,ACxHL;ADyHG,ACzHH;AAAA;AD2HE,MAAI,UAAU,GAAG,CAAjB,EAAoB;AAClB,WAAO;AAAE,MAAA,OAAO,EAAE,UAAX;AAAuB,MAAA,OAAO,EAAE;AAAhC,KAAP;AACD;;AAED,QAAM,IAAI,SAAJ,CACJ,uBAAuB,UAAU,mJAD7B,CAAN;AAGD;;AAED,SAAS,oBAAT,CAA8B;AAAE,EAAA;AAAF,CAA9B,EAAkE;AAChE,EAAA,WAAW,GAAG,WAAd;;AAEA,MAAI,WAAW,KAAK,oBAAa,MAA7B,IAAuC,WAAW,KAAK,oBAAa,IAAxE,EAA8E;AAC5E,WAAO,WAAP;AACD;;AAED,QAAM,IAAI,SAAJ,CAAc,wBAAwB,WAAW,kDAAjD,CAAN;AACD;;AAED,SAAS,YAAT,CAAsB;AAAE,EAAA;AAAF,CAAtB,EAAqD;AACnD,MAAI,CAAC,MAAM,CAAC,QAAP,CAAgB,MAAhB,CAAL,EAA8B;AAC5B,UAAM,IAAI,SAAJ,CAAc,mBAAmB,MAAM,4BAAvC,CAAN;AACD;;AAED,SAAO,MAAP;AACD,EAED;;;AACA,SAAS,eAAT,CACE,SADF,EACoE;AAElE,QAAM;AAAE,IAAA;AAAF,MAAa,SAAnB;;AAEA,MAAI,oBAAQ,MAAR,CAAJ,EAAqB;AACnB,WAAO,EAAE,GAAG;AAAL,KAAP;AACD;;AAED,MAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAO;AAAE,MAAA,CAAC,EAAE,SAAS,CAAC,KAAV,GAAkB,CAAC,GAAxB;AAA6B,MAAA,CAAC,EAAE,SAAS,CAAC,MAAV,GAAmB,CAAC;AAApD,KAAP;AACD;;AAED,MAAI,uBAAqB,MAArB,CAAJ,EAAkC;AAChC,WAAO,MAAM,CAAC,SAAD,CAAb;AACD;;AAED,QAAM,IAAI,SAAJ,CACJ,mBAAmB,MAAM,iHADrB,CAAN;AAGD","file":"playground.0266f34f.js","sourceRoot":"..","sourcesContent":["export const D = 'desert',\n  F = 'forest',\n  M = 'mountain',\n  S = 'swamp',\n  W = 'water',\n  DB = 'desert bears',\n  FB = 'forest bears',\n  MB = 'mountain bears',\n  WB = 'water bears',\n  FC = 'forest cougars',\n  MC = 'mountain cougars',\n  SC = 'swamp cougars',\n  WC = 'water cougars'\n\nexport const TILE_ONE = [W, W, W, W, F, F, S, S, W, D, F, F, S, S, D, DB, DB, FB]\nexport const TILE_TWO = [SC, FC, FC, F, F, F, S, S, F, D, D, D, S, M, M, M, M, D]\nexport const TILE_THREE = [S, S, F, F, F, W, SC, SC, F, M, W, W, MC, M, M, M, W, W]\nexport const TILE_FOUR = [D, D, M, M, M, M, D, D, M, W, W, WC, D, D, D, F, F, FC]\nexport const TILE_FIVE = [S, S, S, M, M, M, S, D, D, W, M, MB, D, D, W, W, WB, WB]\nexport const TILE_SIX = [DB, D, S, S, S, F, MB, M, S, S, F, F, M, W, W, W, W, F]\n\nexport const TILES = [TILE_ONE, TILE_TWO, TILE_THREE, TILE_FOUR, TILE_FIVE, TILE_SIX]\n\n// def upside_down(tile_number)\n//   TILES[tile_number].reverse\n// end\n","import { Hex } from '../dist'\nimport { D, F, M, S, W } from './tiles'\n\n// declare const SVG: any\n\n// const draw = SVG().addTo('.js-map').size('100%', '100%')\n\nconst mapWrapperEl = document.querySelector('.js-map')\nif (!mapWrapperEl) {\n  throw new Error('Map element not found')\n}\n\nexport const renderAll = (hexes: HexWithTerrain[]) => {\n  mapWrapperEl.innerHTML = `\n    <svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='555px' height='494px'>\n      <g>\n        ${hexes.map((hex) => render(hex)).join('')}\n      </g>\n    </svg>\n  `\n}\n\nconst fillHexagon = (hex: HexWithTerrain) => {\n  let fill = 'none'\n  if (hex.terrain?.includes(F)) {\n    fill = '#009900'\n  } else if (hex.terrain?.includes(W)) {\n    fill = '#2596be'\n  } else if (hex.terrain?.includes(D)) {\n    fill = '#ffcc00'\n  } else if (hex.terrain?.includes(M)) {\n    fill = 'gray'\n  } else if (hex.terrain?.includes(S)) {\n    fill = 'purple'\n  }\n  // const polygon = draw.polygon(hex.corners.map(({ x, y }) => `${x},${y}`)).fill(fill)\n  // draw.group().add(polygon)\n  return ` \n    <polygon points='${hex.corners.map(({ x, y }) => `${x},${y}`).join(',')}' fill='${fill}'></polygon>\n  `\n}\n\nexport type HexWithTerrain = Hex & { terrain?: string }\n\nconst BORDER_DISTANCE = 3\nconst DX = [-0.75, -1, -0.75, 0.75, 1, 0.75]\nconst DY = [0.75, 0, -0.75, -0.75, 0, 0.75]\nconst addBearsAndCougars = (hex: HexWithTerrain) => {\n  if (!hex.terrain?.includes('bears') && !hex.terrain?.includes('cougars')) {\n    return\n  }\n\n  const stroke: any = { width: 1.5 }\n  if (hex.terrain?.includes('bears')) {\n    stroke.color = '#000'\n    stroke.dasharray = 4\n  } else if (hex.terrain?.includes('cougars')) {\n    stroke.color = '#c00'\n  }\n\n  // const polygon2 = draw\n  //   .polygon(\n  //     hex.corners.map(({ x, y }, i) => {\n  //       x += BORDER_DISTANCE * DX[i]\n  //       y += BORDER_DISTANCE * DY[i]\n  //       return `${x},${y}`\n  //     }),\n  //   )\n  //   .fill('none')\n  //   .stroke(stroke)\n  // draw.group().add(polygon2)\n\n  return `\n    <polygon points='${hex.corners.map(({ x, y }, i) => {\n      x += BORDER_DISTANCE * DX[i]\n      y += BORDER_DISTANCE * DY[i]\n      return `${x},${y}`\n    })}' fill='none' stroke-width='1.5' stroke='${stroke.color}' />\n  `\n}\n\nconst addCoordinates = (hex: Hex) => {\n  // const text = draw\n  //   .text(`${hex.q},${hex.r}`)\n  //   // .text(`${hex.col},${hex.row}`)\n  //   .font({\n  //     size: hex.width * 0.25,\n  //     anchor: 'middle',\n  //     'dominant-baseline': 'central',\n  //     leading: 0,\n  //   })\n  //   .translate(hex.x, hex.y)\n  // draw.add(text)\n  return `\n    <text font-size='${hex.width * 0.25}' text-anchor='middle' dominant-baseline='central' transform='matrix(1,0,0,1,${\n    hex.x\n  },${hex.y})'>\n      <tspan dy='0' x='0'>${hex.q},${hex.r}</tspan>\n    </text>\n  `\n}\n\nexport const render = (hex: HexWithTerrain): string => {\n  let result = ''\n  result += fillHexagon(hex)\n  result += addBearsAndCougars(hex)\n  result += addCoordinates(hex)\n  return result\n}\n","export enum CardinalCompassDirection {\n  N = 0,\n  E = 2,\n  S = 4,\n  W = 6,\n}\n\nexport enum OrdinalCompassDirection {\n  NE = 1,\n  SE = 3,\n  SW = 5,\n  NW = 7,\n}\n\nexport enum CompassDirection {\n  N,\n  NE,\n  E,\n  SE,\n  S,\n  SW,\n  W,\n  NW,\n}\n\nexport type CompassDirectionLike = keyof typeof CompassDirection | number\n\nexport class Compass {\n  static N = CompassDirection.N\n  static NE = CompassDirection.NE\n  static E = CompassDirection.E\n  static SE = CompassDirection.SE\n  static S = CompassDirection.S\n  static SW = CompassDirection.SW\n  static W = CompassDirection.W\n  static NW = CompassDirection.NW\n  static Cardinal: CardinalCompassDirection\n  static Ordinal: OrdinalCompassDirection\n\n  static of(direction: CompassDirectionLike = CompassDirection.N) {\n    return new Compass(direction)\n  }\n\n  static isCardinal(direction: CompassDirection) {\n    return !!CardinalCompassDirection[direction]\n  }\n\n  static isOrdinal(direction: CompassDirection) {\n    return !!OrdinalCompassDirection[direction]\n  }\n\n  static rotate(direction: number, steps: number): CompassDirection {\n    return signedModulo(direction + steps, 8)\n  }\n\n  direction: CompassDirection\n\n  constructor(direction: CompassDirectionLike = CompassDirection.N) {\n    this.direction = typeof direction === 'number' ? direction : CompassDirection[direction]\n  }\n\n  isCardinal() {\n    return Compass.isCardinal(this.direction)\n  }\n\n  isOrdinal() {\n    return Compass.isOrdinal(this.direction)\n  }\n\n  rotate(steps: number) {\n    return Compass.rotate(this.direction, steps)\n  }\n}\n\n// todo: move to utils?\nfunction signedModulo(dividend: number, divisor: number) {\n  return ((dividend % divisor) + divisor) % divisor\n}\n","export * from './compass'\n","import { Hex, HexCoordinates } from '../../hex'\nimport { Traverser } from '../types'\n\n// todo: rename?\nexport const flatTraverse = <T extends Hex>(traversers: Traverser<T> | Traverser<T>[]) => (\n  cursor: T,\n  getHex: (coordinates: HexCoordinates) => T,\n) => {\n  if (!Array.isArray(traversers)) {\n    return Array.from(traversers(cursor, getHex))\n  }\n\n  const nextHexes: T[] = []\n  for (const traverser of traversers) {\n    for (const nextCursor of traverser(cursor, getHex)) {\n      cursor = nextCursor\n      nextHexes.push(cursor)\n    }\n  }\n  return nextHexes\n}\n","import { Hex } from '../../hex'\nimport { Grid } from '../grid'\n\nexport const inStore = <T extends Hex>(hex: T, grid: Grid<T>) => grid.store.has(hex.toString())\n","/**\n * In TypeScript: pass a type variable to isObject() for best result. E.g.: `isObject<MyObject>(value)`\n */\nexport const isObject = <T = Record<string, unknown>>(value: unknown): value is T =>\n  typeof value === 'object' && value !== null\n","import { AxialCoordinates } from '../hex'\nimport { isObject } from './isObject'\n\nexport const isAxial = (value: unknown): value is AxialCoordinates =>\n  isObject<AxialCoordinates>(value) && Number.isFinite(value.q) && Number.isFinite(value.r)\n","interface UnknownFunction {\n  (...args: unknown[]): unknown\n}\n\nexport const isFunction = <T = UnknownFunction>(value: unknown): value is T => typeof value === 'function'\n","import { OffsetCoordinates } from '../hex'\nimport { isObject } from './isObject'\n\nexport const isOffset = (value: unknown): value is OffsetCoordinates =>\n  isObject<OffsetCoordinates>(value) && Number.isFinite(value.col) && Number.isFinite(value.row)\n","import { Point } from '../hex'\nimport { isObject } from './isObject'\n\nexport const isPoint = (value: unknown): value is Point =>\n  isObject<Point>(value) && Number.isFinite(value.x) && Number.isFinite(value.y)\n","// todo: rename (also rename offset)?\n// todo: change to https://www.redblobgames.com/grids/hexagons/#conversions-offset\nexport const offsetFromZero = (offset: number, distance: number) => (distance + offset * (distance & 1)) >> 1\n","export * from './isAxial'\nexport * from './isFunction'\nexport * from './isObject'\nexport * from './isOffset'\nexport * from './isPoint'\nexport * from './offsetFromZero'\n","import { offsetFromZero } from '../../utils'\nimport { AxialCoordinates, HexPrototype, OffsetCoordinates } from '../types'\n\nexport const offsetToAxialPointy = (col: number, row: number, offset: number): AxialCoordinates => ({\n  q: col - offsetFromZero(offset, row),\n  r: row,\n})\n\nexport const offsetToAxialFlat = (col: number, row: number, offset: number): AxialCoordinates => ({\n  q: col,\n  r: row - offsetFromZero(offset, col),\n})\n\nexport const offsetToAxial = (\n  { col, row }: OffsetCoordinates,\n  { offset, isPointy }: Pick<HexPrototype, 'offset' | 'isPointy'>,\n) => (isPointy ? offsetToAxialPointy(col, row, offset) : offsetToAxialFlat(col, row, offset))\n","import { isOffset } from '../../utils'\nimport { Hex, HexCoordinates } from '../types'\nimport { offsetToAxial } from './offsetToAxial'\n\nexport const cloneHex = <T extends Hex>(hex: T, newProps: Partial<T> | HexCoordinates = {}): T => {\n  if (isOffset(newProps)) {\n    const { col, row, ...otherProps } = newProps\n    const coordinates = offsetToAxial({ col, row }, hex)\n    return Object.assign(Object.create(Object.getPrototypeOf(hex)), hex, coordinates, otherProps)\n  }\n\n  return Object.assign(Object.create(Object.getPrototypeOf(hex)), hex, newProps)\n}\n","// todo: move types to single file in /src\n// tried it and somehow typescript can't call origin as a function anymore in createHexPrototype.ts normalizeOrigin()\n\nexport interface Point {\n  x: number\n  y: number\n}\n\nexport const Orientations = {\n  FLAT: 'FLAT',\n  POINTY: 'POINTY',\n} as const\nexport type ValueOf<T> = T[keyof T]\nexport type Orientation = ValueOf<typeof Orientations>\n\nexport type OffsetCoordinates = {\n  col: number\n  row: number\n}\n\nexport interface AxialCoordinates {\n  q: number\n  r: number\n}\n\nexport interface CubeCoordinates extends AxialCoordinates {\n  s: number\n}\n\nexport type HexCoordinates = (AxialCoordinates & { s?: number }) | OffsetCoordinates\n\nexport interface Ellipse {\n  xRadius: number\n  yRadius: number\n}\n\nexport interface BoundingBox {\n  width: number\n  height: number\n}\n\nexport type hexDimensions = Ellipse | BoundingBox | number\n\nexport interface HexSettings {\n  dimensions: Ellipse\n  orientation: Orientation\n  origin: Point\n  offset: number\n}\n\nexport interface HexPrototype extends HexSettings {\n  readonly __isHoneycombHex: true\n  readonly [Symbol.toStringTag]: 'Hex'\n  readonly col: number\n  readonly corners: Point[]\n  readonly height: number\n  readonly isFlat: boolean\n  readonly isPointy: boolean\n  readonly row: number\n  readonly width: number\n  readonly x: number\n  readonly y: number\n\n  s: number\n\n  equals(this: this, coordinates: HexCoordinates): boolean\n\n  // todo: about 80% sure the newProps type works (it's used in more places, if it works: maybe make it a separate type?)\n  clone(this: this, newProps?: Partial<this> | HexCoordinates): this\n\n  toString(this: this): string\n}\n\nexport interface Hex extends HexPrototype, AxialCoordinates {}\n","import { HexSettings, Orientations } from '../types'\n\nexport const heightPointy = (yRadius: number) => yRadius * 2\n\nexport const heightFlat = (yRadius: number) => yRadius * Math.sqrt(3)\n\nexport const height = ({ orientation, dimensions: { yRadius } }: HexSettings) =>\n  orientation === Orientations.POINTY ? heightPointy(yRadius) : heightFlat(yRadius)\n","import { Hex, Orientations, Point } from '../types'\n\nexport const hexToPoint = ({ orientation, dimensions: { xRadius, yRadius }, origin: { x, y }, q, r }: Hex): Point =>\n  orientation === Orientations.POINTY\n    ? {\n        x: xRadius * Math.sqrt(3) * (q + r / 2) - x,\n        y: ((yRadius * 3) / 2) * r - y,\n      }\n    : {\n        x: ((xRadius * 3) / 2) * q - x,\n        y: yRadius * Math.sqrt(3) * (r + q / 2) - y,\n      }\n","import { isObject } from '../../utils'\nimport { Hex } from '../types'\n\nexport const isHex = (value: unknown): value is Hex =>\n  isObject<Hex>(value) && !!Object.getPrototypeOf(value).__isHoneycombHex\n","import { HexSettings, Orientations } from '../types'\n\nexport const widthPointy = (xRadius: number) => xRadius * Math.sqrt(3)\n\nexport const widthFlat = (xRadius: number) => xRadius * 2\n\nexport const width = ({ orientation, dimensions: { xRadius } }: HexSettings) =>\n  orientation === Orientations.POINTY ? widthPointy(xRadius) : widthFlat(xRadius)\n","import { Hex, HexSettings, Orientations, Point } from '../types'\nimport { heightFlat, heightPointy } from './height'\nimport { hexToPoint } from './hexToPoint'\nimport { isHex } from './isHex'\nimport { widthFlat, widthPointy } from './width'\n\nexport const cornersPointy = (width: number, height: number, { x, y }: Point) => [\n  { x: x + width * 0.5, y: y - height * 0.25 },\n  { x: x + width * 0.5, y: y + height * 0.25 },\n  { x, y: y + height * 0.5 },\n  { x: x - width * 0.5, y: y + height * 0.25 },\n  { x: x - width * 0.5, y: y - height * 0.25 },\n  { x, y: y - height * 0.5 },\n]\n\nexport const cornersFlat = (width: number, height: number, { x, y }: Point) => [\n  { x: x + width * 0.25, y: y - height * 0.5 },\n  { x: x + width * 0.5, y },\n  { x: x + width * 0.25, y: y + height * 0.5 },\n  { x: x - width * 0.25, y: y + height * 0.5 },\n  { x: x - width * 0.5, y },\n  { x: x - width * 0.25, y: y - height * 0.5 },\n]\n\n// todo: add to docs that when passed a hex, its corners relative to the \"origin hex\" are returned (different per hex coordinates)\n// and when passed hexSettings, corners relative to any hex's origin are returned (always the same)\nexport function corners(hex: Hex): Point[]\nexport function corners(hexSettings: Omit<HexSettings, 'offset'>): Point[]\nexport function corners(hexOrHexSettings: Omit<HexSettings, 'offset'>): Point[] {\n  const {\n    orientation,\n    dimensions: { xRadius, yRadius },\n  } = hexOrHexSettings\n  const point = isHex(hexOrHexSettings) ? hexToPoint(hexOrHexSettings) : hexOrHexSettings.origin\n  return orientation === Orientations.POINTY\n    ? cornersPointy(widthPointy(xRadius), heightPointy(yRadius), point)\n    : cornersFlat(widthFlat(xRadius), heightFlat(yRadius), point)\n}\n","import { isOffset } from '../../utils'\nimport { Hex, HexCoordinates } from '../types'\nimport { isHex } from './isHex'\nimport { offsetToAxial } from './offsetToAxial'\n\nexport const createHex = <T extends Hex>(prototypeOrHex: T, props: Partial<T> | HexCoordinates = { q: 0, r: 0 }): T => {\n  if (isHex(prototypeOrHex)) {\n    return prototypeOrHex.clone(props)\n  }\n\n  if (isOffset(props)) {\n    const { col, row, ...otherProps } = props\n    const coordinates = offsetToAxial({ col, row }, prototypeOrHex)\n    return Object.assign(Object.create(prototypeOrHex), coordinates, otherProps)\n  }\n\n  return Object.assign(Object.create(prototypeOrHex), props)\n}\n","import { isAxial } from '../../utils'\nimport { AxialCoordinates, HexCoordinates, OffsetCoordinates } from '../types'\n\nexport const equals = (a: HexCoordinates, b: HexCoordinates) =>\n  // when the 2nd coordinates is axial, assume the first is too\n  // when equals() is used as a hex method, the 1st coordinates is that of the hex itself which is always axial\n  isAxial(b) ? equalsAxial(a as AxialCoordinates, b) : equalsOffset(a as OffsetCoordinates, b as OffsetCoordinates)\n\nfunction equalsAxial(a: AxialCoordinates, b: AxialCoordinates) {\n  return a.q === b.q && a.r === b.r\n}\n\nfunction equalsOffset(a: OffsetCoordinates, b: OffsetCoordinates) {\n  return a.col === b.col && a.row === b.row\n}\n","import { offsetFromZero } from '../../utils'\nimport { Hex, OffsetCoordinates } from '../types'\n\nexport const hexToOffsetPointy = (q: number, r: number, offset: number): OffsetCoordinates => ({\n  col: q + offsetFromZero(offset, r),\n  row: r,\n})\n\nexport const hexToOffsetFlat = (q: number, r: number, offset: number): OffsetCoordinates => ({\n  col: q,\n  row: r + offsetFromZero(offset, q),\n})\n\nexport const hexToOffset = ({ q, r, offset, isPointy }: Pick<Hex, 'q' | 'r' | 'offset' | 'isPointy'>) =>\n  isPointy ? hexToOffsetPointy(q, r, offset) : hexToOffsetFlat(q, r, offset)\n","import { HexSettings, Orientations } from '../types'\n\nexport const isFlat = ({ orientation }: HexSettings) => orientation === Orientations.FLAT\n","import { HexSettings, Orientations } from '../types'\n\nexport const isPointy = ({ orientation }: HexSettings) => orientation === Orientations.POINTY\n","import { AxialCoordinates } from '../types'\n\nexport const toString = ({ q, r }: AxialCoordinates) => `${q},${r}`\n","import { isFunction, isObject, isPoint } from '../../utils'\nimport { BoundingBox, Ellipse, Hex, HexPrototype, HexSettings, Orientation, Orientations, Point } from '../types'\nimport { cloneHex } from './cloneHex'\nimport { corners } from './corners'\nimport { equals } from './equals'\nimport { height } from './height'\nimport { hexToOffset } from './hexToOffset'\nimport { hexToPoint } from './hexToPoint'\nimport { isFlat } from './isFlat'\nimport { isPointy } from './isPointy'\nimport { toString } from './toString'\nimport { width } from './width'\n\nexport const defaultHexSettings: HexSettings = {\n  dimensions: { xRadius: 1, yRadius: 1 },\n  orientation: Orientations.POINTY,\n  origin: { x: 0, y: 0 },\n  offset: -1,\n}\n\nexport const createHexPrototype = <T extends Hex>(options?: Partial<T | HexPrototypeOptions>): T => {\n  // pseudo private property\n  const s = new WeakMap()\n\n  const prototype = {\n    ...defaultHexSettings,\n    clone(newProps) {\n      return cloneHex(this, newProps)\n    },\n    equals(coordinates) {\n      return equals(this, coordinates)\n    },\n    toString() {\n      return toString(this)\n    },\n    // todo: add to docs that any of the above methods will be overwritten when present in customPrototype\n    ...options,\n  } as T & HexPrototypeOptions\n\n  // use Object.defineProperties() to create readonly properties\n  // origin is set in the final \"step\"\n  Object.defineProperties(prototype, {\n    [Symbol.toStringTag]: { value: 'Hex' },\n    __isHoneycombHex: { value: true, writable: false },\n    // todo: all props set with `value` are writable (somehow the default `writable: false` doesn't apply). Not sure if this is a problem though\n    // see: Object.getOwnPropertyDescriptors(hexPrototype)\n    col: {\n      get() {\n        return hexToOffset(this).col\n      },\n    },\n    corners: {\n      get() {\n        return corners(this)\n      },\n    },\n    dimensions: { value: normalizeDimensions(prototype) },\n    height: {\n      get() {\n        return height(this)\n      },\n    },\n    isFlat: {\n      get() {\n        return isFlat(this)\n      },\n    },\n    isPointy: {\n      get() {\n        return isPointy(this)\n      },\n    },\n    orientation: { value: normalizeOrientation(prototype) },\n    offset: { value: assertOffset(prototype) },\n    row: {\n      get() {\n        return hexToOffset(this).row\n      },\n    },\n    s: {\n      get() {\n        return Number.isFinite(s.get(this)) ? s.get(this) : -this.q - this.r\n      },\n      set(_s: number) {\n        s.set(this, _s)\n      },\n    },\n    width: {\n      get() {\n        return width(this)\n      },\n    },\n    x: {\n      get() {\n        return hexToPoint(this).x\n      },\n    },\n    y: {\n      get() {\n        return hexToPoint(this).y\n      },\n    },\n  } as PropertyDescriptorMap & ThisType<T & Hex>)\n\n  return Object.defineProperties(prototype, {\n    origin: { value: normalizeOrigin<T>(prototype) },\n  })\n}\n\nexport interface OriginFn {\n  <T extends Omit<HexPrototype, 'origin'>>(prototype: T): Point\n}\n\nexport interface HexPrototypeOptions {\n  dimensions: Ellipse | BoundingBox | number\n  orientation: Orientation\n  origin: Point | 'topLeft' | OriginFn\n  offset: number\n}\n\nfunction normalizeDimensions(prototype: HexPrototypeOptions) {\n  const { dimensions } = prototype\n\n  if (isObject(dimensions)) {\n    if ((dimensions as Ellipse).xRadius > 0 && (dimensions as Ellipse).yRadius > 0) {\n      return { ...(dimensions as Ellipse) }\n    }\n\n    const { width, height } = dimensions as BoundingBox\n    if (width > 0 && height > 0) {\n      return normalizeOrientation(prototype) === Orientations.POINTY\n        ? { xRadius: width / Math.sqrt(3), yRadius: height / 2 }\n        : { xRadius: width / 2, yRadius: height / Math.sqrt(3) }\n    }\n  }\n\n  if (dimensions > 0) {\n    return { xRadius: dimensions, yRadius: dimensions } as Ellipse\n  }\n\n  throw new TypeError(\n    `Invalid dimensions: ${dimensions}. Dimensions must be expressed as an Ellipse ({ xRadius: number, yRadius: number }), a Rectangle ({ width: number, height: number }) or a number.`,\n  )\n}\n\nfunction normalizeOrientation({ orientation }: HexPrototypeOptions) {\n  orientation = orientation as Orientation\n\n  if (orientation === Orientations.POINTY || orientation === Orientations.FLAT) {\n    return orientation\n  }\n\n  throw new TypeError(`Invalid orientation: ${orientation}. Orientation must be either 'POINTY' or 'FLAT'.`)\n}\n\nfunction assertOffset({ offset }: HexPrototypeOptions) {\n  if (!Number.isFinite(offset)) {\n    throw new TypeError(`Invalid offset: ${offset}. Offset must be a number.`)\n  }\n\n  return offset\n}\n\n// origin can be a function that will be called with the almost-complete hex prototype (complete except for origin)\nfunction normalizeOrigin<T extends HexPrototype>(\n  prototype: Omit<T, 'origin'> & Pick<HexPrototypeOptions, 'origin'>,\n): Point {\n  const { origin } = prototype\n\n  if (isPoint(origin)) {\n    return { ...origin }\n  }\n\n  if (origin === 'topLeft') {\n    return { x: prototype.width * -0.5, y: prototype.height * -0.5 }\n  }\n\n  if (isFunction<OriginFn>(origin)) {\n    return origin(prototype)\n  }\n\n  throw new TypeError(\n    `Invalid origin: ${origin}. Origin must be expressed as a Point ({ x: number, y: number }), 'topLeft' or a function that returns a Point.`,\n  )\n}\n","export * from './cloneHex'\nexport * from './corners'\nexport * from './createHex'\nexport * from './createHexPrototype'\nexport * from './equals'\nexport * from './height'\nexport * from './hexToOffset'\nexport * from './hexToPoint'\nexport * from './isFlat'\nexport * from './isHex'\nexport * from './isPointy'\nexport * from './offsetToAxial'\nexport * from './toString'\nexport * from './width'\n","export * from './functions'\nexport * from './types'\n","import { CompassDirection } from '../../compass'\nimport { AxialCoordinates, Hex, offsetToAxialFlat, offsetToAxialPointy } from '../../hex'\n\nconst DIRECTIONS_POINTY = [\n  null, // ambiguous\n  { q: 1, r: -1 }, // NE\n  { q: 1, r: 0 }, // E\n  { q: 0, r: 1 }, // SE\n  null, // ambiguous\n  { q: -1, r: 1 }, // SW\n  { q: -1, r: 0 }, // W\n  { q: 0, r: -1 }, // NW\n] as AxialCoordinates[]\nconst DIRECTIONS_FLAT = [\n  { q: 0, r: -1 }, // N\n  { q: 1, r: -1 }, // NE\n  null, // ambiguous\n  { q: 1, r: 0 }, // SE\n  { q: 0, r: 1 }, // S\n  { q: -1, r: 1 }, // SW\n  null, // ambiguous\n  { q: -1, r: 0 }, // NW\n] as AxialCoordinates[]\n\nexport const neighborOfPointy = <T extends Hex>({ offset, q, r, col, row }: T, direction: CompassDirection) => {\n  if (direction === CompassDirection.S || direction === CompassDirection.N) {\n    const nextRow = direction === CompassDirection.S ? row + 1 : row - 1\n    return offsetToAxialPointy(col, nextRow, offset)\n  }\n  const neighbor = DIRECTIONS_POINTY[direction]\n  return { q: q + neighbor.q, r: r + neighbor.r }\n}\n\nexport const neighborOfFlat = <T extends Hex>({ offset, q, r, col, row }: T, direction: CompassDirection) => {\n  if (direction === CompassDirection.E || direction === CompassDirection.W) {\n    const nextCol = direction === CompassDirection.E ? col + 1 : col - 1\n    return offsetToAxialFlat(nextCol, row, offset)\n  }\n  const neighbor = DIRECTIONS_FLAT[direction]\n  return { q: q + neighbor.q, r: r + neighbor.r }\n}\n\nexport const neighborOf = <T extends Hex>(hex: T, direction: CompassDirection) =>\n  hex.isPointy ? neighborOfPointy(hex, direction) : neighborOfFlat(hex, direction)\n","export * from './flatTraverse'\nexport * from './inStore'\nexport * from './neighborOf'\n","import { createHex, Hex, HexCoordinates } from '../hex'\nimport { flatTraverse } from './functions'\nimport { Callback, Traverser } from './types'\n\nexport class Grid<T extends Hex> {\n  static from<T extends Hex>(iterable: Map<string, T> | Iterable<T>) {\n    let firstHex: T\n    let store: Map<string, T>\n\n    if (iterable instanceof Map) {\n      firstHex = iterable.values()[Symbol.iterator]().next().value\n      store = iterable\n    } else {\n      const array = Array.from(iterable)\n      firstHex = array[0]\n      store = new Map(array.map((hex) => [hex.toString(), hex]))\n    }\n\n    if (!firstHex) {\n      throw new Error(`Can't create grid from empty iterable: ${iterable}`)\n    }\n\n    return new Grid<T>(Object.getPrototypeOf(firstHex), store)\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Grid'\n  }\n\n  store = new Map<string, T>()\n  getHex = (coordinates?: HexCoordinates) => {\n    const hex = createHex(this.hexPrototype).clone(coordinates) // clone to enable users to make custom hexes\n    return this.store.get(hex.toString()) ?? hex\n  }\n\n  private _getPrevHexState: GetHexState<T> = () => ({ hexes: [], cursor: null })\n\n  constructor(hexPrototype: T, traversers?: Traverser<T> | Traverser<T>[])\n  constructor(hexPrototype: T, store?: Map<string, T>)\n  constructor(public hexPrototype: T, traversersOrStore?: Traverser<T> | Traverser<T>[] | Map<string, T>) {\n    if (traversersOrStore instanceof Map) {\n      this._getPrevHexState = () => {\n        const hexes = Array.from(traversersOrStore.values())\n        return { hexes, cursor: hexes[hexes.length - 1] }\n      }\n      this.store = new Map(traversersOrStore)\n    } else if (traversersOrStore) {\n      const hexes = flatTraverse(traversersOrStore)(this.getHex(), this.getHex)\n      this._getPrevHexState = () => ({ hexes, cursor: hexes[hexes.length - 1] })\n      this.store = new Map(hexes.map((hex) => [hex.toString(), hex]))\n    }\n  }\n\n  *[Symbol.iterator]() {\n    for (const hex of this._getPrevHexState(this).hexes) {\n      yield hex\n    }\n  }\n\n  each(callback: Callback<T, void>) {\n    const each: GetHexState<T> = (currentGrid) => {\n      const prevHexState = this._getPrevHexState(currentGrid)\n      for (const hex of prevHexState.hexes) {\n        callback(hex, currentGrid)\n      }\n      return prevHexState\n    }\n    return this._clone(each)\n  }\n\n  filter(predicate: Callback<T, boolean>) {\n    const filter: GetHexState<T> = (currentGrid) => {\n      const nextHexes: T[] = []\n      const prevHexState = this._getPrevHexState(currentGrid)\n      let cursor = prevHexState.cursor\n\n      for (const hex of prevHexState.hexes) {\n        if (predicate(hex, currentGrid)) {\n          cursor = hex\n          nextHexes.push(cursor)\n        }\n      }\n\n      return { hexes: nextHexes, cursor }\n    }\n\n    return this._clone(filter)\n  }\n\n  takeWhile(predicate: Callback<T, boolean>) {\n    const takeWhile: GetHexState<T> = (currentGrid) => {\n      const nextHexes: T[] = []\n      const prevHexState = this._getPrevHexState(currentGrid)\n      let cursor = prevHexState.cursor\n\n      for (const hex of prevHexState.hexes) {\n        if (!predicate(hex, currentGrid)) {\n          return { hexes: nextHexes, cursor }\n        }\n        cursor = hex\n        nextHexes.push(cursor)\n      }\n\n      return { hexes: nextHexes, cursor }\n    }\n\n    return this._clone(takeWhile)\n  }\n\n  traverse(traversers: Traverser<T>[] | Traverser<T>) {\n    const traverse: GetHexState<T> = (currentGrid) => {\n      const nextHexes: T[] = []\n      let cursor = this._getPrevHexState(currentGrid).cursor ?? this.getHex()\n\n      for (const nextCursor of flatTraverse(traversers)(cursor, this.getHex)) {\n        cursor = nextCursor\n        nextHexes.push(cursor)\n      }\n\n      return { hexes: nextHexes, cursor }\n    }\n\n    return this._clone(traverse)\n  }\n\n  run(callback?: Callback<T, void>) {\n    for (const hex of this._getPrevHexState(this).hexes) {\n      callback && callback(hex, this)\n    }\n    return this\n  }\n\n  private _clone(getHexState: GetHexState<T>) {\n    const newGrid = new Grid(this.hexPrototype, this.store)\n    newGrid._getPrevHexState = getHexState\n    return newGrid\n  }\n}\n\ninterface GetHexState<T extends Hex> {\n  (grid: Grid<T>): HexState<T>\n}\n\ninterface HexState<T extends Hex> {\n  hexes: T[]\n  cursor: T | null\n}\n","import { Hex, HexCoordinates } from '../../hex'\nimport { Traverser } from '../types'\n\nexport const at = <T extends Hex>(coordinates: HexCoordinates): Traverser<T> => (_, getHex) => [getHex(coordinates)]\n\nexport const start = at\n","import { Hex } from '../../hex'\nimport { flatTraverse } from '../functions'\nimport { Traverser } from '../types'\n\n/**\n * For each hex from `source` traverses over hex coordinates from `traverser`\n * @param source    Each hex in the source is passed one-by-one as a cursor to the traverser\n * @param branch Receives each hex coordinates from source as the start cursor\n */\nexport const branch = <T extends Hex>(\n  source: Traverser<T> | Traverser<T>[],\n  branch: Traverser<T> | Traverser<T>[],\n): Traverser<T> => (cursor, getHex) => {\n  const flatBranch = flatTraverse(branch)\n  const result: T[] = []\n  let _cursor = cursor\n\n  for (const sourceCursor of flatTraverse(source)(_cursor, getHex)) {\n    _cursor = sourceCursor\n    result.push(_cursor)\n    for (const branchCursor of flatBranch(_cursor, getHex)) {\n      result.push(branchCursor)\n    }\n  }\n\n  return result\n}\n","import { CompassDirection } from '../../compass'\nimport { Hex } from '../../hex'\nimport { neighborOf } from '../functions'\nimport { Traverser } from '../types'\n\nexport const move = <T extends Hex>(direction: CompassDirection, times = 1): Traverser<T> => {\n  return (cursor, getHex) => {\n    const result: T[] = []\n    let _cursor = cursor\n\n    for (let i = 1; i <= times; i++) {\n      _cursor = getHex(neighborOf(_cursor, direction))\n      result.push(_cursor)\n    }\n\n    return result\n  }\n}\n","import { Compass, CompassDirection } from '../../compass'\nimport { Hex, HexCoordinates, hexToOffset, OffsetCoordinates } from '../../hex'\nimport { isOffset } from '../../utils'\nimport { Traverser } from '../types'\nimport { at } from './at'\nimport { branch } from './branch'\nimport { move } from './move'\n\n// todo: add in docs: only 90° corners for cardinal directions\n// todo: when passed opposing corners: maybe add option to determine if row or col is traversed first\nexport function rectangle<T extends Hex>(options: RectangleOptions): Traverser<T>\nexport function rectangle<T extends Hex>(cornerA: HexCoordinates, cornerB: HexCoordinates): Traverser<T>\nexport function rectangle<T extends Hex>(\n  optionsOrCornerA: RectangleOptions | HexCoordinates,\n  cornerB?: HexCoordinates,\n): Traverser<T> {\n  return (cursor, getHex) => {\n    const { width, height, start = { q: 0, r: 0 }, direction = CompassDirection.E } = cornerB\n      ? optionsFromOpposingCorners(optionsOrCornerA as HexCoordinates, cornerB, cursor.isPointy, cursor.offset)\n      : (optionsOrCornerA as RectangleOptions)\n\n    return branch<T>([at(start), move(Compass.rotate(direction, 2), height - 1)], move(direction, width - 1))(\n      cursor,\n      getHex,\n    )\n  }\n}\n\nexport interface RectangleOptions {\n  width: number\n  height: number\n  start?: HexCoordinates\n  direction?: CompassDirection\n}\n\nfunction optionsFromOpposingCorners(\n  cornerA: HexCoordinates,\n  cornerB: HexCoordinates,\n  isPointy: boolean,\n  offset: number,\n): RectangleOptions {\n  const { col: cornerACol, row: cornerARow } = assertOffsetCoordinates(cornerA, isPointy, offset)\n  const { col: cornerBCol, row: cornerBRow } = assertOffsetCoordinates(cornerB, isPointy, offset)\n  const smallestCol = cornerACol < cornerBCol ? 'A' : 'B'\n  const smallestRow = cornerARow < cornerBRow ? 'A' : 'B'\n  const smallestColRow = (smallestCol + smallestRow) as keyof typeof RULES_FOR_SMALLEST_COL_ROW\n  const { swapWidthHeight, direction } = RULES_FOR_SMALLEST_COL_ROW[smallestColRow]\n  const width = Math.abs(cornerACol - cornerBCol) + 1\n  const height = Math.abs(cornerARow - cornerBRow) + 1\n\n  return {\n    width: swapWidthHeight ? height : width,\n    height: swapWidthHeight ? width : height,\n    start: cornerA,\n    direction,\n  }\n}\n\nfunction assertOffsetCoordinates(cornerA: HexCoordinates, isPointy: boolean, offset: number): OffsetCoordinates {\n  return isOffset(cornerA) ? cornerA : hexToOffset({ q: cornerA.q, r: cornerA.r, isPointy, offset })\n}\n\nconst RULES_FOR_SMALLEST_COL_ROW = {\n  AA: {\n    swapWidthHeight: false,\n    direction: CompassDirection.E,\n  },\n  AB: {\n    swapWidthHeight: true,\n    direction: CompassDirection.N,\n  },\n  BA: {\n    swapWidthHeight: true,\n    direction: CompassDirection.S,\n  },\n  BB: {\n    swapWidthHeight: false,\n    direction: CompassDirection.W,\n  },\n}\n\n/**\n * This is the \"old way\" of creating rectangles. It's less performant (up until ~40x slower with 200x200 rectangles), but it's able to create\n * actual rectangles (with 90° corners) for the ordinal directions. But because I assume people mostly need rectangles in the cardinal directions,\n * I've decided to drop \"true ordinal rectangle\" support for now.\n */\n\n// export const RECTANGLE_DIRECTIONS_POINTY = [\n//   null, // ambiguous\n//   ['q', 's', 'r'], // NE\n//   ['q', 'r', 's'], // E\n//   ['r', 'q', 's'], // SE\n//   null, // ambiguous\n//   ['r', 's', 'q'], // SW\n//   ['s', 'r', 'q'], // W\n//   ['s', 'q', 'r'], // NW\n// ] as [keyof CubeCoordinates, keyof CubeCoordinates, keyof CubeCoordinates][]\n\n// export const RECTANGLE_DIRECTIONS_FLAT = [\n//   ['s', 'q', 'r'], // N\n//   ['q', 's', 'r'], // NE\n//   null,\n//   ['q', 'r', 's'], // SE\n//   ['r', 'q', 's'], // S\n//   ['r', 's', 'q'], // SW\n//   null,\n//   ['s', 'r', 'q'], // NW\n// ] as [keyof CubeCoordinates, keyof CubeCoordinates, keyof CubeCoordinates][]\n\n// export const rectangle = <T extends Hex>(\n//   hexPrototype: T,\n//   {\n//     width,\n//     height,\n//     start = { q: 0, r: 0 },\n//     direction = hexPrototype.isPointy ? CompassDirection.E : CompassDirection.SE,\n//   }: RectangleOptions,\n// ) => {\n//   const result: T[] = []\n//   const _start: CubeCoordinates = { q: start.q, r: start.r, s: -start.q - start.r }\n//   const [firstCoordinate, secondCoordinate, thirdCoordinate] = (hexPrototype.isPointy\n//     ? RECTANGLE_DIRECTIONS_POINTY\n//     : RECTANGLE_DIRECTIONS_FLAT)[direction]\n//   const [firstStop, secondStop] = hexPrototype.isPointy ? [width, height] : [height, width]\n\n//   for (let second = 0; second < secondStop; second++) {\n//     // for (let second = 0; second > -secondStop; second--) {\n//     const secondOffset = offsetFromZero(hexPrototype.offset, second)\n\n//     for (let first = -secondOffset; first < firstStop - secondOffset; first++) {\n//       const nextCoordinates = {\n//         [firstCoordinate]: first + _start[firstCoordinate],\n//         [secondCoordinate]: second + _start[secondCoordinate],\n//         [thirdCoordinate]: -first - second + _start[thirdCoordinate],\n//       } as unknown\n//       result.push(createHex<T>(hexPrototype, nextCoordinates as CubeCoordinates))\n//     }\n//   }\n\n//   return result\n// }\n","export * from './at'\nexport * from './branch'\nexport * from './move'\nexport * from './rectangle'\n","export * from './functions'\nexport * from './grid'\nexport * from './traversers'\nexport * from './types'\n","// todo: export everything explicitly to create a public api\nexport * from './compass'\nexport * from './grid'\nexport * from './hex'\n","import { HexWithTerrain, renderAll } from './render'\nimport { TILES } from './tiles'\nimport { createHexPrototype, Grid, Hex, rectangle } from '../src'\n\ninterface CustomHex extends Hex {\n  terrain: string\n}\n\nconst hexPrototype = createHexPrototype<CustomHex>({\n  dimensions: { width: 60, height: 51.96 },\n  orientation: 'FLAT',\n  origin: 'topLeft',\n})\n\nconst grid = new Grid(hexPrototype, rectangle({ width: 12, height: 9 }))\n// .traverse([at({ q: 0, r: 0 }), move(Compass.SE), move(Compass.NE)])\n// .filter(inStore)\n// .each(render)\n// .run()\n// console.log(grid.store)\n\nconst tilesToArray = (tilesOrder: string[]) => {\n  const tilesIndex: number[] = []\n\n  const tiles: string[][] = []\n  tilesOrder.forEach((tile) => {\n    const tileIndex = Number(tile[0]) - 1 // convert to zero-based index\n    tilesIndex.push(tileIndex)\n\n    const isFlipped = !!tile[1]\n    tiles.push(isFlipped ? [...TILES[tileIndex]].reverse() : TILES[tileIndex])\n  })\n\n  const result = []\n\n  for (let pair = 0; pair < 3; pair++) {\n    for (let j = 0; j < 3; j++) {\n      for (let coordinate = 0; coordinate < 6; coordinate++) {\n        const leftTiles = tiles[tilesIndex[pair * 2]]\n        result.push(leftTiles[j * 6 + coordinate])\n      }\n      for (let coordinate = 0; coordinate < 6; coordinate++) {\n        const rightTiles = tiles[tilesIndex[pair * 2 + 1]]\n        result.push(rightTiles[j * 6 + coordinate])\n      }\n    }\n  }\n\n  return result\n}\n\nconst renderTiles = (tilesOrder: string[]) => {\n  const hexagonsOrdered: HexWithTerrain[] = []\n  const tilesInArray = tilesToArray(tilesOrder)\n\n  // grid.each(render)\n  let index = 0\n  grid\n    .each((hex, grid) => {\n      hex.terrain = tilesInArray[index]\n      hexagonsOrdered.push(hex)\n      // grid.store.set(`${hex.q},${hex.r}`, hex)\n      // console.log('tilesInArray[' + index + ']:', tilesInArray[index])\n      index++\n      // render(hex)\n    })\n    .run()\n  renderAll(hexagonsOrdered)\n}\n\nconst gatherAndRender = () => {\n  const values: string[] = []\n  Array.prototype.forEach.call(document.querySelectorAll('.js-tilesPosition'), (el, i) =>\n    values.push(el.value || i + 1),\n  )\n  document.querySelectorAll('.js-tilesPositionCheckbox').forEach((el, i) => {\n    const element = el as HTMLInputElement\n    values[i] += element.checked ? 'r' : ''\n  })\n  renderTiles(values)\n}\n\ndocument.querySelectorAll('.js-tilesPosition').forEach((el) => el.addEventListener('input', gatherAndRender))\n\ndocument.querySelectorAll('.js-tilesPositionCheckbox').forEach((el) => {\n  el.addEventListener('change', gatherAndRender)\n})\n\ngatherAndRender()\n"]}